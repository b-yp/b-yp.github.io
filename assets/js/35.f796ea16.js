(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{1201:function(t,e,a){"use strict";a.r(e);var r=a(24),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("本文由 "),a("a",{attrs:{href:"http://ksria.com/simpread/",target:"_blank",rel:"noopener noreferrer"}},[t._v("简悦 SimpRead"),a("OutboundLink")],1),t._v(" 转码， 原文地址 https://juejin.im/post/5e91b01651882573716a9b23?utm_source=gold_browser_extension")])]),t._v(" "),a("blockquote",[a("p",[t._v("本文投稿自一位前端小姐姐——"),a("strong",[t._v("徐漂漂")]),t._v("，本文"),a("strong",[t._v("干货成吨，全程高能")]),t._v("。希望大家多点赞、评论、关注，给小姐姐继续写文章的动力！")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/thelastto/interview",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端小姐姐的 GitHub"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"另外小姐姐最近在看机会-base-北京-邮箱已经附在-github-上了。欢迎有坑位的同学进行推荐。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#另外小姐姐最近在看机会-base-北京-邮箱已经附在-github-上了。欢迎有坑位的同学进行推荐。"}},[t._v("#")]),t._v(" 另外小姐姐最近在看机会 base 北京，邮箱已经附在 GitHub 上了。欢迎有坑位的同学进行推荐。")]),t._v(" "),a("h2",{attrs:{id:"一、算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、算法"}},[t._v("#")]),t._v(" 一、算法")]),t._v(" "),a("h3",{attrs:{id:"_1-全排列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-全排列"}},[t._v("#")]),t._v(" 1. 全排列")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction permutate(str) {\n    var array = str.split('');\n    function loop(array, pre = []) {\n        if (array.length == 1) {\n            return [pre.concat(array).join('')];\n        }\n        let res = [];\n        for (let index = 0; index < array.length; index++) {\n            var first = array.pop();\n            res = res.concat(loop(array, [...pre, first]));\n            array.unshift(first);\n        }\n        return res;\n    }\n    return Array.from(new Set(loop(array)))\n}\n\n复制代码\n")])])]),a("h3",{attrs:{id:"_2-二分搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-二分搜索"}},[t._v("#")]),t._v(" 2. 二分搜索")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction BinarySearch1 (arr, target) {\n    return search(arr, target, 0, arr.length - 1)\n    function search (arr, target, from, to) {\n        if (from > to) {\n            return -1\n        }\n        const mid = Math.floor((from + to)/2)\n        if (arr[mid] > target) {\n            return search(arr, target, from, mid - 1)\n        } else if (arr[mid] < target) {\n            return search(arr, target, mid + 1, to)\n        } else {\n            return mid\n        }\n    }\n}\n\nfunction BinarySearch2 (arr, target) {\n    let from = 0\n    let to = arr.length - 1\n    let mid = Math.floor((from + to)/2)\n    while (from <= to) {\n        mid = Math.floor((from + to)/2)\n        if (arr[mid] > target) {\n            to = mid - 1\n        } else if (arr[mid] < target) {\n            from = mid + 1\n        } else {\n            return mid\n        }\n    }\n\n    return -1\n}\n复制代码\n")])])]),a("h3",{attrs:{id:"_3-排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-排序"}},[t._v("#")]),t._v(" 3. 排序")]),t._v(" "),a("h4",{attrs:{id:"_1-冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-冒泡排序"}},[t._v("#")]),t._v(" (1). 冒泡排序")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\n/*\n第1次循环确定最大的\n第n次循环确定第n大的\n */\nfunction BubbleSort (arr) {\n    const length = arr.length\n\n    for (let i = 0; i < length; i++) {\n        for (let j = 1; j < length-i; j++) {\n            if (arr[j] < arr[j - 1]) {\n                const temp = arr[j]\n                arr[j] = arr[j - 1]\n                arr[j - 1] = temp\n            }\n        }\n    }\n\n    return arr\n}\n复制代码\n")])])]),a("h4",{attrs:{id:"_2-快速排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-快速排序"}},[t._v("#")]),t._v(" (2). 快速排序")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\n/*\n在左边找大数，在右边找小数\n交换\n */\nfunction QuickSort(arr, low, high) {\n    let left = low\n    let right = high\n    let basic = arr[low]\n    while (left < right) {\n        while (left < right && arr[right] > basic) {\n            right--\n        }\n        while (left < right && arr[left] <= basic) {\n            left++\n        }\n\n        if (left < right) {\n            const temp = arr[left]\n            arr[left] = arr[right]\n            arr[right] = temp\n        } else {\n            const temp = arr[low]\n            arr[low] = arr[left]\n            arr[left] = temp\n\n            QuickSort(arr, low, left - 1)\n            QuickSort(arr, right + 1, high)\n        }\n    }\n\n    return arr\n}\n复制代码\n")])])]),a("h4",{attrs:{id:"_3-选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-选择排序"}},[t._v("#")]),t._v(" (3). 选择排序")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\n/*\n 寻找第i小的数的位置，放到i位置上\n */\nfunction SelectionSort (arr) {\n    const length = arr.length\n    for (let i = 0; i < length; i++ ) {\n        let minIndex= i\n        for (let j = i + 1; j < length; j++) {\n            minIndex = arr[minIndex] <= arr[j] ? minIndex : j\n        }\n        if (minIndex !== i) {\n            const temp = arr[i]\n            arr[i] = arr[minIndex]\n            arr[minIndex] = temp\n\n        }\n    }\n    return arr\n}\n复制代码\n")])])]),a("h4",{attrs:{id:"_4-插入排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-插入排序"}},[t._v("#")]),t._v(" (4). 插入排序")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction InsertionSort (arr) {\n    const length = arr.length\n    for (let i = 1; i < length; i++) {\n        const temp = arr[i]\n        let j\n        for (j = i - 1; j >= 0 && temp < arr[j]; j--) {\n            arr[j+1] = arr[j]\n        }\n        arr[j+1] = temp\n    }\n    return arr\n}\n复制代码\n")])])]),a("h4",{attrs:{id:"_5-希尔排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-希尔排序"}},[t._v("#")]),t._v(" (5). 希尔排序")]),t._v(" "),a("p",[t._v("插入排序的改进版。对间隔 gap 为一组的数进行插入排序")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction ShellSort (arr) {\n    const length = arr.length\n    let gap = Math.floor(length)\n    while (gap) {\n        for (let i = gap; i < length; i++) {\n            const temp = arr[i]\n            let j\n            for (j = i - gap; j >= 0 && temp < arr[j]; j = j - gap) {\n                arr[j + gap] = arr[j]\n            }\n            arr[j + gap] = temp\n        }\n        gap = Math.floor(gap / 2)\n    }\n    return arr\n}\n复制代码\n")])])]),a("h4",{attrs:{id:"_6-归并排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-归并排序"}},[t._v("#")]),t._v(" (6). 归并排序")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction MergeSort (arr, low, high) {\n    const length = arr.length\n    if (low === high) {\n        return arr[low]\n    }\n    const mid = Math.floor((low + high)/2)\n    MergeSort(arr, low, mid)\n    MergeSort(arr, mid + 1, high)\n    merge(arr, low, high)\n    return arr\n\n}\n\nfunction merge (arr, low, high) {\n    const mid = Math.floor((low + high)/2)\n    let left = low\n    let right = mid + 1\n    const result = []\n    while (left <= mid && right <= high) {\n        if (arr[left] <= arr[right]) {\n            result.push(arr[left++])\n        } else {\n            result.push(arr[right++])\n        }\n    }\n    while (left <= mid) {\n        result.push(arr[left++])\n    }\n    while (right <= high) {\n        result.push(arr[right++])\n    }\n\n    arr.splice(low, high-low+1, ...result)\n}\n\nconst test = [2, 34, 452,3,5, 785, 32, 345, 567, 322,5]\n\nconsole.log(MergeSort(test, 0, test.length - 1))\n复制代码\n")])])]),a("h4",{attrs:{id:"_7-堆排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-堆排序"}},[t._v("#")]),t._v(" (7). 堆排序")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction HeapSort (arr) {\n    const length = arr.length\n\n    // 调整初始堆，调整完其实也确定了最大值\n    // 但此时最大值是在 arr[0] 中\n    for (let i = Math.floor(length/2) - 1; i >= 0; i--) {\n        adjustHeap(arr, i, length)\n    }\n\n    // 把 arr[0](最大值)换到后面\n    for (let i = length - 1; i >=0; i--) {\n        const temp = arr[0]\n        arr[0] = arr[i]\n        arr[i] = temp\n        adjustHeap(arr, 0, i)\n    }\n\n    return arr\n}\n\n// size 是还需要调整的堆的大小\n// 随着一个个最大值的确定，size 会越来越小\nfunction adjustHeap (arr, position, size) {\n    const left = position * 2 + 1\n    const right = left + 1\n    let maxIndex = position\n    if (left < size && arr[left] > arr[maxIndex]) {\n        maxIndex = left\n    }\n    if (right < size && arr[right] > arr[maxIndex]) {\n        maxIndex = right\n    }\n    if (maxIndex !== position) {\n        const temp = arr[position]\n        arr[position] = arr[maxIndex]\n        arr[maxIndex] = temp\n        adjustHeap(arr, maxIndex, size)\n    }\n    return arr\n}\n复制代码\n")])])]),a("h2",{attrs:{id:"二、js-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、js-基础"}},[t._v("#")]),t._v(" 二、JS 基础")]),t._v(" "),a("h3",{attrs:{id:"_1-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-继承"}},[t._v("#")]),t._v(" 1. 继承")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1、原型链继承，将父类的实例作为子类的原型，他的特点是实例是子类的实例也是父类的实例，父类新增的原型方法 / 属性，子类都能够访问，并且原型链继承简单易于实现，缺点是来自原型对象的所有属性被所有实例共享，无法实现多继承，无法向父类构造函数传参。")])]),t._v(" "),a("li",[a("p",[t._v("2、构造继承，使用父类的构造函数来增强子类实例，即复制父类的实例属性给子类，构造继承可以向父类传递参数，可以实现多继承，通过 call 多个父类对象。但是构造继承只能继承父类的实例属性和方法，不能继承原型属性和方法，无法实现函数服用，每个子类都有父类实例函数的副本，影响性能")])]),t._v(" "),a("li",[a("p",[t._v("3、实例继承，为父类实例添加新特性，作为子类实例返回，实例继承的特点是不限制调用方法，不管是 new 子类（）还是子类（）返回的对象具有相同的效果，缺点是实例是父类的实例，不是子类的实例，不支持多继承")])]),t._v(" "),a("li",[a("p",[t._v("4、拷贝继承：特点：支持多继承，缺点：效率较低，内存占用高（因为要拷贝父类的属性）无法获取父类不可枚举的方法（不可枚举方法，不能使用 for in 访问到）")])]),t._v(" "),a("li",[a("p",[t._v("5、组合继承：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用")])]),t._v(" "),a("li",[a("p",[t._v("6、寄生组合继承：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法 / 属性，避免的组合继承的缺点")])])]),t._v(" "),a("h3",{attrs:{id:"_2-this-指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-this-指向"}},[t._v("#")]),t._v(" 2.this 指向")]),t._v(" "),a("h4",{attrs:{id:"_1-this-指向有哪几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-this-指向有哪几种"}},[t._v("#")]),t._v(" (1).this 指向有哪几种")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("默认绑定：全局环境中，this 默认绑定到 window。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("隐式绑定：一般地，被直接对象所包含的函数调用时，也称为方法调用，this 隐式绑定到该直接对象。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("隐式丢失：隐式丢失是指被隐式绑定的函数丢失绑定对象，从而默认绑定到 window。显式绑定：通过 call()、apply()、bind() 方法把对象绑定到 this 上，叫做显式绑定。")])])]),t._v(" "),a("li",[a("p",[t._v("4.new 绑定：如果函数或者方法调用之前带有关键字 new，它就构成构造函数调用。对于 this 绑定来说，称为 new 绑定。")]),t._v(" "),a("ul",[a("li",[t._v("构造函数通常不使用 return 关键字，它们通常初始化新对象，当构造函数的函数体执行完毕时，它会显式返回。在这种情况下，构造函数调用表达式的计算结果就是这个新对象的值。")]),t._v(" "),a("li",[t._v("如果构造函数使用 return 语句但没有指定返回值，或者返回一个原始值，那么这时将忽略返回值，同时使用这个新对象作为调用结果。")]),t._v(" "),a("li",[t._v("如果构造函数显式地使用 return 语句返回一个对象，那么调用表达式的值就是这个对象。")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-改变函数内部-this-指针的指向函数-bind-apply-call-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-改变函数内部-this-指针的指向函数-bind-apply-call-的区别"}},[t._v("#")]),t._v(" (2). 改变函数内部 this 指针的指向函数（bind，apply，call 的区别）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1.apply：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.apply(A, arguments); 即 A 对象应用 B 对象的方法。")])]),t._v(" "),a("li",[a("p",[t._v("2.call：调用一个对象的一个方法，用另一个对象替换当前对象。例如：B.call(A, args1,args2); 即 A 对象调用 B 对象的方法。")])]),t._v(" "),a("li",[a("p",[t._v("3.bind 除了返回是函数以外，它的参数和 call 一样。")])])]),t._v(" "),a("h4",{attrs:{id:"_3-箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-箭头函数"}},[t._v("#")]),t._v(" (3). 箭头函数")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("箭头函数没有 this，所以需要通过查找作用域链来确定 this 的值，这就意味着如果箭头函数被非箭头函数包含，this 绑定的就是最近一层非箭头函数的 this，")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("箭头函数没有自己的 arguments 对象，但是可以访问外围函数的 arguments 对象")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("不能通过 new 关键字调用，同样也没有 new.target 值和原型")])])])]),t._v(" "),a("h3",{attrs:{id:"_3-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-数据类型"}},[t._v("#")]),t._v(" 3. 数据类型")]),t._v(" "),a("h4",{attrs:{id:"_1-基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本数据类型"}},[t._v("#")]),t._v(" (1). 基本数据类型")]),t._v(" "),a("p",[t._v("Undefined、Null、Boolean、Number 、String、Symbol")]),t._v(" "),a("h4",{attrs:{id:"_2-symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-symbol"}},[t._v("#")]),t._v(" (2).symbol")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("语法：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 不能用 new\nlet s = Symbol()\n\n// 可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。\nlet s1 = Symbol('foo');\nlet s2 = Symbol('bar');\n\ns1 // Symbol(foo)\ns2 // Symbol(bar)\n\ns1.toString() // \"Symbol(foo)\"\ns2.toString() // \"Symbol(bar)\"\n复制代码\n")])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("作用：定义一个独一无二的值")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("用作对象的属性名")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("不会出现在"),a("code",[t._v("for...in")]),t._v("、"),a("code",[t._v("for...of")]),t._v("循环中，也不会被"),a("code",[t._v("Object.keys()")]),t._v("、"),a("code",[t._v("Object.getOwnPropertyNames()")]),t._v("、"),a("code",[t._v("JSON.stringify()")]),t._v("返回。")])])]),t._v(" "),a("li",[t._v("2."),a("code",[t._v("Object.getOwnPropertySymbols()")]),t._v("方法，可以获取指定对象的所有 Symbol 属性名。该方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。")]),t._v(" "),a("li",[t._v("3."),a("code",[t._v("Reflect.ownKeys()")]),t._v("方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("用于定义一组常量")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("log.levels = {\n  DEBUG: Symbol('debug'),\n  INFO: Symbol('info'),\n  WARN: Symbol('warn')\n};\n复制代码\n")])])])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("类型转换：")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("转成字符串")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("String(sym) // 'Symbol(My symbol)'\nsym.toString() // 'Symbol(My symbol)'\n复制代码\n")])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("转成布尔值")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Boolean(sym)\n!sym\n复制代码\n")])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("不能转成数字")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("不能与其他类型的值进行运算")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("let sym = Symbol('My symbol');\n\n\"your symbol is \" + sym\n// TypeError: can't convert symbol to string\n`your symbol is ${sym}`\n// TypeError: can't convert symbol to string\n复制代码\n")])])])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("属性：Symbol.prototype.description")])])]),t._v(" "),a("li",[a("p",[t._v("5.Symbol.for()，Symbol.keyFor()")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("在全局环境中登记 Symbol 值。之后不会再重复生成")])])])])])]),t._v(" "),a("h4",{attrs:{id:"_3-如何判断类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如何判断类型"}},[t._v("#")]),t._v(" (3). 如何判断类型")]),t._v(" "),a("p",[t._v("typeof()，instanceof，Object.prototype.toString.call()")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1."),a("code",[t._v("typeof")]),t._v("操作符")]),t._v(" "),a("ul",[a("li",[t._v('1."undefined"——如果这个值未定义;')]),t._v(" "),a("li",[t._v('2."boolean"——如果这个值是布尔值;')]),t._v(" "),a("li",[t._v('3."string"——如果这个值是字符串;')]),t._v(" "),a("li",[t._v('4."number"——如果这个值是数值;')]),t._v(" "),a("li",[t._v('5."object"——如果这个值是对象或 null;')]),t._v(" "),a("li",[t._v('6."function"——如果这个值是函数。')]),t._v(" "),a("li",[t._v('7."symbol"——es6 新增的 symbol 类型')])])]),t._v(" "),a("li",[a("p",[t._v("2."),a("code",[t._v("instanceof")]),t._v("：用来判断对象是不是某个构造函数的实例。会沿着原型链找的")])]),t._v(" "),a("li",[a("p",[t._v("3."),a("code",[t._v("Object.prototype.toString.call()")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var toString = Object.prototype.toString;\n\ntoString.call(new Date); // [object Date]\ntoString.call(new String); // [object String]\ntoString.call(Math); // [object Math]\ntoString.call([]); // [Object Array]\ntoString.call(new Number) // [object Number]\ntoString.call(true) // [object Boolean]\ntoString.call(function(){}) // [object Function]\ntoString.call({}) // [object Object]\ntoString.call(new Promise(() => {})) // [object Promise]\n\ntoString.call(new Map) // [object Map]\ntoString.call(new RegExp) // [object RegExp]\ntoString.call(Symbol()) // [object Symbol]\ntoString.call(function *a(){}) // [object GeneratorFunction]\ntoString.call(new DOMException()) // [object DOMException]\ntoString.call(new Error) // [object Error]\n\ntoString.call(undefined); // [object Undefined]\ntoString.call(null); // [object Null]\n\n// 还有 WeakMap、 WeakSet、Proxy 等\n复制代码\n")])])])])]),t._v(" "),a("h4",{attrs:{id:"_4-判断是否是数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-判断是否是数组"}},[t._v("#")]),t._v(" (4). 判断是否是数组")]),t._v(" "),a("ul",[a("li",[t._v("1."),a("code",[t._v("Array.isArray(arr)")])]),t._v(" "),a("li",[t._v("2."),a("code",[t._v("Object.prototype.toString.call(arr) === '[Object Array]'")])]),t._v(" "),a("li",[t._v("3."),a("code",[t._v("arr instanceof Array")])]),t._v(" "),a("li",[t._v("4."),a("code",[t._v("array.constructor === Array")])])]),t._v(" "),a("h4",{attrs:{id:"_5-字符串转数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-字符串转数字"}},[t._v("#")]),t._v(" (5). 字符串转数字")]),t._v(" "),a("p",[a("code",[t._v("parseInt(string, radix)")])]),t._v(" "),a("h3",{attrs:{id:"_4-callback-hell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-callback-hell"}},[t._v("#")]),t._v(" 4.CallBack Hell")]),t._v(" "),a("p",[t._v("大脑对于事情的计划方式是线性的、阻塞的、单线程的语义，但是回调表达异步流 程的方式是非线性的、非顺序的，这使得正确推导这样的代码难度很大。难于理解的代码 是坏代码，会导致坏 bug。我们需要一种更同步、更顺序、更阻塞的的方式来表达异步，就像我们的大脑一样。")]),t._v(" "),a("p",[t._v("也是更重要的一点，回调会受到控制反转的影响，因为回调暗中把控制权交给第三 方 (通常是不受你控制的第三方工具!) 来调用你代码中的 continuation。可以发明一些特定逻辑来解决这些信任问题，但是其难度高于应有的水平，可能会产生更 笨重、更难维护的代码，并且缺少足够的保护，其中的损害要直到你受到 bug 的影响才会 被发现。")]),t._v(" "),a("p",[t._v("我们需要一个通用的方案来解决这些信任问题。不管我们创建多少回调，这一方案都应可 以复用，且没有重复代码的开销。")]),t._v(" "),a("h4",{attrs:{id:"_1-promise-为什么以及如何用于解决控制反转信任问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-promise-为什么以及如何用于解决控制反转信任问题"}},[t._v("#")]),t._v(" (1).Promise 为什么以及如何用于解决控制反转信任问题")]),t._v(" "),a("p",[t._v("Promise 的实现可以"),a("RouterLink",{attrs:{to:"/piecemeal/js-skill/promise.html"}},[t._v("看这里")])],1),t._v(" "),a("p",[t._v("Promise 这种模式通过可信任的语义把回调作为参数传递，使得这种行为更可靠更合理。 通过把回调的控制反转反转回来，我们把控制权放在了一个可信任的系统 (Promise) 中， 这种系统的设计目的就是为了使异步编码更清晰。Promise 并没有摈弃回调，只是把回调的安排转交给了一个位于我们和其他工具之间的可信任 的中介机制。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("调用回调过早;")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("这个问题主要就是担心代码是否会引入类似 Zalgo 这样的副作用 (参见第 2 章)。在这类问 题中，一个任务有时同步完成，有时异步完成，这可能会导致竞态条件。")]),t._v(" "),a("p",[t._v("根据定义，Promise 就不必担心这种问题，因为即使是立即完成的 Promise(类似于 new Promise(function(resolve){ resolve(42); })) 也无法被同步观察到。")]),t._v(" "),a("p",[t._v("也就是说，对一个 Promise 调用 then(..) 的时候，即使这个 Promise 已经决议，提供给 then(..) 的回调也总会被异步调用 (对此的更多讨论，请参见 1.5 节)。")])])])]),t._v(" "),a("li",[a("p",[t._v("调用回调过晚 (或不被调用);")]),t._v(" "),a("ul",[a("li",[t._v("和前面一点类似，Promise 创建对象调用 resolve(..) 或 reject(..) 时，这个 Promise 的 then(..) 注册的观察回调就会被自动调度。可以确信，这些被调度的回调在下一个异步事 件点上一定会被触发 (参见 1.5 节)。")])])]),t._v(" "),a("li",[a("p",[t._v("回调未调用")]),t._v(" "),a("ul",[a("li",[t._v("首先，没有任何东西 (甚至 JavaScript 错误) 能阻止 Promise 向你通知它的决议(如果它 决议了的话)。如果你对一个 Promise 注册了一个完成回调和一个拒绝回调，那么 Promise 在决议时总是会调用其中的一个。")]),t._v(" "),a("li",[t._v("但是，如果 Promise 本身永远不被决议呢? 即使这样，Promise 也提供了解决方案，其使用 了一种称为竞态的高级抽象机制:")])])]),t._v(" "),a("li",[a("p",[t._v("调用回调次数过多;")]),t._v(" "),a("ul",[a("li",[t._v("Promise 的定义方式使得它只能被决议一次。如果出于某种 原因，Promise 创建代码试图调用 resolve(..) 或 reject(..) 多次，或者试图两者都调用， 那么这个 Promise 将只会接受第一次决议，并默默地忽略任何后续调用。")]),t._v(" "),a("li",[t._v("由于 Promise 只能被决议一次，所以任何通过 then(..) 注册的 (每个) 回调就只会被调 用一次。")])])]),t._v(" "),a("li",[a("p",[t._v("未能传递所需的环境和参数;")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Promise 至多只能有一个决议值 (完成或拒绝)。")]),t._v(" "),a("p",[t._v("如果你没有用任何值显式决议，那么这个值就是 undefined，这是 JavaScript 常见的处理方 式。但不管这个值是什么，无论当前或未来，它都会被传给所有注册的 (且适当的完成或 拒绝) 回调。")])])])]),t._v(" "),a("li",[a("p",[t._v("吞掉可能出现的错误和异常。")]),t._v(" "),a("ul",[a("li",[t._v("如果拒绝一个 Promise 并给出一个理由 (也就是一个出错消息)，这个值就会被传给拒绝回调")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-promise、generator、async-await"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-promise、generator、async-await"}},[t._v("#")]),t._v(" (2).promise、generator、async/await")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("promise")]),t._v(" "),a("ul",[a("li",[t._v("优点：解决了回调地狱的问题")]),t._v(" "),a("li",[t._v("缺点：无法取消 Promise ，错误需要通过回调函数来捕获")])])]),t._v(" "),a("li",[a("p",[t._v("generator")]),t._v(" "),a("ul",[a("li",[t._v("生成器内部的代码是以自然的同步 / 顺序方式表达任务的一系列步骤")])])]),t._v(" "),a("li",[a("p",[t._v("async/await")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("优点：代码清晰，不用像 Promise 写一大堆 then 链，处理了回调地狱的问题")])]),t._v(" "),a("li",[a("p",[t._v("缺点：await 将异步代码改造成同步代码，如果多个异步操作没有依赖性而使用 await 会导致性能上的降低。")])])])])]),t._v(" "),a("h3",{attrs:{id:"_5-加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-加载"}},[t._v("#")]),t._v(" 5. 加载")]),t._v(" "),a("h4",{attrs:{id:"_1-异步加载-js-的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步加载-js-的方法"}},[t._v("#")]),t._v(" (1). 异步加载 js 的方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("defer：只支持 IE 如果您的脚本不会改变文档的内容，可将 defer 属性加入到"),a("code",[t._v("<script>")]),t._v("标签中，以便加快处理文档的速度。因为浏览器知道它将能够安全地读取文档的剩余部分而不用执行脚本，它将推迟对脚本的解释，直到文档已经显示给用户为止。")])]),t._v(" "),a("li",[a("p",[t._v("async：HTML5 属性，仅适用于外部脚本；并且如果在 IE 中，同时存在 defer 和 async，那么 defer 的优先级比较高；脚本将在页面完成时执行。")])])]),t._v(" "),a("h4",{attrs:{id:"_2-图片的懒加载和预加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-图片的懒加载和预加载"}},[t._v("#")]),t._v(" (2). 图片的懒加载和预加载")]),t._v(" "),a("ul",[a("li",[t._v("预加载：提前加载图片，当用户需要查看时可直接从本地缓存中渲染。")]),t._v(" "),a("li",[t._v("懒加载：懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。")])]),t._v(" "),a("p",[a("strong",[t._v("两种技术的本质：两者的行为是相反的，一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。")])]),t._v(" "),a("h3",{attrs:{id:"_6-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-事件"}},[t._v("#")]),t._v(" 6. 事件")]),t._v(" "),a("h4",{attrs:{id:"_1-事件流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-事件流"}},[t._v("#")]),t._v(" (1). 事件流")]),t._v(" "),a("p",[t._v("HTML 中与 javascript 交互是通过事件驱动来实现的，例如鼠标点击事件 onclick、页面的滚动事件 onscroll 等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下 “事件流” 的概念。")]),t._v(" "),a("p",[t._v("什么是事件流：事件流描述的是从页面中接收事件的顺序, DOM2 级事件流包括下面几个阶段。")]),t._v(" "),a("ul",[a("li",[t._v("事件捕获阶段")]),t._v(" "),a("li",[t._v("处于目标阶段")]),t._v(" "),a("li",[t._v("事件冒泡阶段")])]),t._v(" "),a("p",[t._v("IE 只支持事件冒泡。")]),t._v(" "),a("h4",{attrs:{id:"_2-什么是事件监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是事件监听"}},[t._v("#")]),t._v(" (2). 什么是事件监听")]),t._v(" "),a("p",[a("code",[t._v("addEventListener()")]),t._v("方法，用于向指定元素添加事件句柄，它可以更简单的控制事件，语法为")]),t._v(" "),a("p",[a("code",[t._v("element.addEventListener(event, function, useCapture)")]),t._v(";")]),t._v(" "),a("ul",[a("li",[a("p",[t._v('第一个参数是事件的类型 (如 "click" 或 "mousedown").')])]),t._v(" "),a("li",[a("p",[t._v("第二个参数是事件触发后调用的函数。")])]),t._v(" "),a("li",[a("p",[t._v("第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("target.addEventListener(type, listener, options: EventListenerOptions);\ntarget.addEventListener(type, listener, useCapture: boolean);\ntarget.addEventListener(type, listener, useCapture: boolean, wantsUntrusted: boolean  );  // Gecko/Mozilla only\n复制代码\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("interface EventListenerOptions {\n  capture?: boolean // 表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发\n  once?: boolean // 表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除\n  passive?: boolean // 设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告\n}\n复制代码\n")])])]),a("h4",{attrs:{id:"_3-mouseover-和-mouseenter-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-mouseover-和-mouseenter-的区别"}},[t._v("#")]),t._v(" (3). mouseover 和 mouseenter 的区别")]),t._v(" "),a("ul",[a("li",[t._v("mouseover：当鼠标移入元素或其子元素都会触发事件，所以有一个重复触发，冒泡的过程。对应的移除事件是 mouseout")]),t._v(" "),a("li",[t._v("mouseenter：当鼠标移除元素本身（不包含元素的子元素）会触发事件，也就是不会冒泡，对应的移除事件是 mouseleave")])]),t._v(" "),a("h4",{attrs:{id:"_4-事件委托以及冒泡原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-事件委托以及冒泡原理"}},[t._v("#")]),t._v(" (4). 事件委托以及冒泡原理")]),t._v(" "),a("p",[t._v("简介：事件委托指的是，不在事件的发生地（直接 dom）上设置监听函数，而是在其父元素上设置监听函数，通过事件冒泡，父元素可以监听到子元素上事件的触发，通过判断事件发生元素 DOM 的类型，来做出不同的响应。")]),t._v(" "),a("p",[t._v("举例：最经典的就是 ul 和 li 标签的事件监听，比如我们在添加事件时候，采用事件委托机制，不会在 li 标签上直接添加，而是在 ul 父元素上添加。")]),t._v(" "),a("p",[t._v("好处：比较合适动态元素的绑定，新添加的子元素也会有监听函数，也可以有事件触发机制。")]),t._v(" "),a("h4",{attrs:{id:"_5-事件代理在捕获阶段的实际应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-事件代理在捕获阶段的实际应用"}},[t._v("#")]),t._v(" (5). 事件代理在捕获阶段的实际应用")]),t._v(" "),a("p",[t._v("可以在父元素层面阻止事件向子元素传播，也可代替子元素执行某些操作。")]),t._v(" "),a("h3",{attrs:{id:"_7-跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-跨域"}},[t._v("#")]),t._v(" 7. 跨域")]),t._v(" "),a("h4",{attrs:{id:"_1-cors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cors"}},[t._v("#")]),t._v(" (1).CORS")]),t._v(" "),a("p",[t._v("CORS(Cross-Origin Resource Sharing，跨源资源共享) 背后的基本思想，就是使用自定义的 HTTP 头部 让浏览器与服务器进行沟通。")]),t._v(" "),a("p",[t._v("比如一个简单的使用 GET 或 POST 发送的请求，它没有自定义的头部，而主体内容是 text/plain。在 发送该请求时，需要给它附加一个额外的 Origin 头部，其中包含请求页面的源信息 (协议、域名和端 口)，以便服务器根据这个头部信息来决定是否给予响应。下面是 Origin 头部的一个示例:")]),t._v(" "),a("p",[a("code",[t._v("Origin: http://www.nczonline.net")]),t._v(" 如果服务器认为这个请求可以接受，就在 Access-Control-Allow-Origin 头部中回发相同的源")]),t._v(" "),a("p",[t._v('信息 (如果是公共资源，可以回发 "*")。例如:')]),t._v(" "),a("p",[a("code",[t._v("Access-Control-Allow-Origin: http://www.nczonline.net")])]),t._v(" "),a("p",[t._v("如果没有这个头部，或者有这个头部但源信息不匹配，浏览器就会驳回请求。正常情况下，浏览器 会处理请求。注意，请求和响应都不包含 cookie 信息。")]),t._v(" "),a("h4",{attrs:{id:"_2-ie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-ie"}},[t._v("#")]),t._v(" (2).IE")]),t._v(" "),a("p",[t._v("微软在 IE8 中引入了 XDR(XDomainRequest) 类型。以下是 XDR 与 XHR 的一些不同之 处。")]),t._v(" "),a("ol",[a("li",[t._v("cookie 不会随请求发送，也不会随响应返回。")]),t._v(" "),a("li",[t._v("只能设置请求头部信息中的 Content-Type 字段。")]),t._v(" "),a("li",[t._v("不能访问响应头部信息。")]),t._v(" "),a("li",[t._v("只支持 GET 和 POST 请求。")])]),t._v(" "),a("h4",{attrs:{id:"_3-其他浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-其他浏览器"}},[t._v("#")]),t._v(" (3). 其他浏览器")]),t._v(" "),a("p",[t._v("通过 XMLHttpRequest 对象实现了对 CORS 的原生支持")]),t._v(" "),a("ol",[a("li",[t._v("不能使用 setRequestHeader() 设置自定义头部。")]),t._v(" "),a("li",[t._v("不能发送和接收 cookie。")]),t._v(" "),a("li",[t._v("调用 getAllResponseHeaders() 方法总会返回空字符串。")])]),t._v(" "),a("h4",{attrs:{id:"_4-jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-jsonp"}},[t._v("#")]),t._v(" (4).JSONP")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('微信公众号：世界上有意思的事\n\nfunction handleResponse(response){\nalert("You’re at IP address " + response.ip + ", which is in " +\nresponse.city + ", " + response.region_name);\n}\nvar script = document.createElement("script");\nscript.src = "http://freegeoip.net/json/?callback=handleResponse"; document.body.insertBefore(script, document.body.firstChild);\n复制代码\n')])])]),a("ul",[a("li",[t._v("JSON 只支持 get，因为 script 标签只能使用 get 请求；")]),t._v(" "),a("li",[t._v("JSONP 需要后端配合返回指定格式的数据。")])]),t._v(" "),a("h4",{attrs:{id:"_5-代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-代理"}},[t._v("#")]),t._v(" (5). 代理")]),t._v(" "),a("p",[t._v("起一个代理服务器，实现数据的转发")]),t._v(" "),a("h4",{attrs:{id:"_6-利用-iframe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-利用-iframe"}},[t._v("#")]),t._v(" (6). 利用 iframe")]),t._v(" "),a("ul",[a("li",[t._v("window.postMessage")]),t._v(" "),a("li",[t._v("Cross Frame(aba)")]),t._v(" "),a("li",[t._v("window.name")])]),t._v(" "),a("p",[a("a",{attrs:{href:"http://lovelock.coding.me/javascript/2015-08-10-iframe%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/#window-name",target:"_blank",rel:"noopener noreferrer"}},[t._v("lovelock.coding.me/javascript/…"),a("OutboundLink")],1)]),t._v(" "),a("h4",{attrs:{id:"_7-window-postmessage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-window-postmessage"}},[t._v("#")]),t._v(" (7).window.postMessage")]),t._v(" "),a("p",[t._v("只支持到 IE8 及以上的 IE 浏览器，其他现代浏览器当然没有问题。")]),t._v(" "),a("h4",{attrs:{id:"_8-child-与-parent-通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-child-与-parent-通信"}},[t._v("#")]),t._v(" (8). child 与 parent 通信")]),t._v(" "),a("p",[t._v("不受"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[t._v("同源策略"),a("OutboundLink")],1),t._v("的限制")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("给接收数据的一方添加事件绑定："),a("code",[t._v("addEventListener('message', receiveMessage);")])])]),t._v(" "),a("li",[a("p",[t._v("发送数据的一方拿到接收数据一方的 window："),a("code",[t._v('targetWindow.postMessage("Welcome to unixera.com", "http://iframe1.unixera.com");')])])])]),t._v(" "),a("h4",{attrs:{id:"_9-chilid-与-child-通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-chilid-与-child-通信"}},[t._v("#")]),t._v(" (9).chilid 与 child 通信")]),t._v(" "),a("p",[t._v("有跨域问题，只适合站内不同子域间的通信（设置 document.domain 为同一级域名）")]),t._v(" "),a("h4",{attrs:{id:"_10-cross-frame"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-cross-frame"}},[t._v("#")]),t._v(" (10).Cross Frame")]),t._v(" "),a("p",[t._v("这是一个通用的方法，简单来说是 A iframe 包含 B iframe，在 B iframe 中调用了相关的接口，完成调用之后获取到结果，"),a("code",[t._v("location.href")]),t._v("到和 A iframe 位于同一个域的 C iframe，在 C iframe 中调用 A iframe 中定义的方法，将 B iframe 中获取的结果作为参数传到要跳转的 url 后，在 C iframe 中通过"),a("code",[t._v("location.search")]),t._v("变量来获取变量。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/11/17168edb3b5c65ed?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_11-window-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-window-name"}},[t._v("#")]),t._v(" (11).window.name")]),t._v(" "),a("p",[a("code",[t._v("window")]),t._v("对象的"),a("code",[t._v("name")]),t._v("属性是一个很特殊的属性，在设定了"),a("code",[t._v("window.name")]),t._v("之后，执行"),a("code",[t._v("location.href")]),t._v("跳转，"),a("code",[t._v("window.name")]),t._v("属性仍然不会发生变化，可以通过这种方式实现变量的传递。")]),t._v(" "),a("h3",{attrs:{id:"_8-ajax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-ajax"}},[t._v("#")]),t._v(" 8.Ajax")]),t._v(" "),a("h4",{attrs:{id:"_1-实现一个-ajax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现一个-ajax"}},[t._v("#")]),t._v(" (1). 实现一个 Ajax")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nvar xhr = new XMLHttpRequest()\n// 必须在调用 open()之前指定 onreadystatechange 事件处理程序才能确保跨浏览器兼容性\nxhr.onreadystatechange = function () {\n  if (xhr.readyState === 4) {\n    if (xhr.status >= 200 && xhr.status < 300 || xhr.status ==== 304) {\n      console.log(xhr.responseText)\n    } else {\n      console.log('Error:' + xhr.status)\n    }\n  }\n}\n// 第三个参数表示异步发送请求\nxhr.open('get', '/api/getSth',  true)\n// 参数为作为请求主体发送的数据\nxhr.send(null)\n复制代码\n")])])]),a("h4",{attrs:{id:"_2-ajax-状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-ajax-状态"}},[t._v("#")]),t._v(" (2).Ajax 状态")]),t._v(" "),a("ol",{attrs:{start:"0"}},[a("li",[t._v("未初始化。尚未调用 open() 方法。")]),t._v(" "),a("li",[t._v("启动。已经调用 open() 方法，但尚未调用 send() 方法。")]),t._v(" "),a("li",[t._v("发送。已经调用 send() 方法，但尚未接收到响应。")]),t._v(" "),a("li",[t._v("接收。已经接收到部分响应数据。")]),t._v(" "),a("li",[t._v("完成。已经接收到全部响应数据，而且已经可以在客户端使用了。")])]),t._v(" "),a("h4",{attrs:{id:"_3-将原生的-ajax-封装成-promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-将原生的-ajax-封装成-promise"}},[t._v("#")]),t._v(" (3). 将原生的 ajax 封装成 promise")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nconst ajax = (url, method, async, data) => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest()\n    xhr.onreadystatechange = () => {\n      // 已经接收到全部响应数据，而且已经可以在客户端使用了\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          resolve(JSON.parse(xhr.responseText))\n        } else if (xhr.status > 400) {\n          reject('发生错误')\n        }\n      }\n    }\n    xhr.open(url, method, async)\n    xhr.send(data || null)\n  })\n}\n复制代码\n")])])]),a("h3",{attrs:{id:"_9-垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-垃圾回收"}},[t._v("#")]),t._v(" 9. 垃圾回收")]),t._v(" "),a("p",[t._v("找出那些不再继续使用的变 量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔 (或代码执行中预定的收集时间)， 周期性地执行这一操作。")]),t._v(" "),a("h4",{attrs:{id:"_1-标记清除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-标记清除"}},[t._v("#")]),t._v(" (1). 标记清除")]),t._v(" "),a("p",[t._v("先所有都加上标记，再把环境中引用到的变量去除标记。剩下的就是没用的了")]),t._v(" "),a("h4",{attrs:{id:"_2-引用计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-引用计数"}},[t._v("#")]),t._v(" (2). 引用计数")]),t._v(" "),a("p",[t._v("跟踪记录每 个值被引用的次数。清除引用次数为 0 的变量 ⚠️"),a("strong",[t._v("会有循环引用问题")]),t._v(" 。循环引用如果大量存在就会导致内存泄露。")]),t._v(" "),a("h3",{attrs:{id:"_10-eval-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-eval-是什么"}},[t._v("#")]),t._v(" 10.eval 是什么")]),t._v(" "),a("p",[a("strong",[t._v("eval 方法就像是一个完整的 ECMAScript 解析器，它只接受一个参数，即要执行的 ECMAScript (或 JavaScript) 字符串")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("性能差：引擎无法在编译时对作用域查找进行优化")])]),t._v(" "),a("ul",[a("li",[t._v("1.JavaScript 引擎会在编译阶段进行数项的性能优化。其中有些优化依赖于能够根据代码的 词法进行静态分析，并预先确定所有变量和函数的定义位置，才能在执行过程中快速找到 标识符。")]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("无法在词法分析阶段明确知道 eval(..) 会接收到什么代码，这些代码会 如何对作用域进行修改，也无法知道传递给 with 用来创建新词法作用域的对象的内容到底 是什么。最悲观的情况是如果出现了 eval(..) 或 with，所有的优化可能都是无意义的，因此最简 单的做法就是完全不做任何优化。")])])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("欺骗作用域：但在严格模式的程序中，eval(..) 在运行时有其自己的词法作用域，意味着其 中的声明无法修改所在的作用域。")])])])]),t._v(" "),a("h3",{attrs:{id:"_11-监听对象属性的改变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-监听对象属性的改变"}},[t._v("#")]),t._v(" 11. 监听对象属性的改变")]),t._v(" "),a("h4",{attrs:{id:"一-es5-中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-es5-中"}},[t._v("#")]),t._v(" (一).ES5 中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nObject.defineProperty(user,'name',{\n  set：function(key,value){\n    // 这也是 Vue 的原理\n  }\n})\n复制代码\n")])])]),a("h4",{attrs:{id:"二-es6-中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-es6-中"}},[t._v("#")]),t._v(" (二). ES6 中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nvar  user = new Proxy({}, {\n  set：function(target,key,value,receiver){\n    \n  }\n})\n复制代码\n")])])]),a("p",[t._v("可以监听动态增加的属性。例如 "),a("code",[t._v("user.id = 1")])]),t._v(" "),a("h3",{attrs:{id:"_12-实现一个私有变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-实现一个私有变量"}},[t._v("#")]),t._v(" 12. 实现一个私有变量")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("配置属性")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("obj={\n  name: 'xujiahui',\n  getName:function(){\n    return this.name\n  }\n}\nobject.defineProperty(obj,\"name\",{\n//不可枚举不可配置\n\n});\n复制代码\n")])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("代码")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\n  function product(){\n    var name='xujiahui';\n    this.getName=function(){\n      return name;\n    }\n  }\n  var obj=new product();\n复制代码\n")])])]),a("h3",{attrs:{id:"_13-操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-操作符"}},[t._v("#")]),t._v(" 13. 操作符")]),t._v(" "),a("h4",{attrs:{id:"_1-和-、以及object-is的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-和-、以及object-is的区别"}},[t._v("#")]),t._v(" (1)."),a("code",[t._v("==")]),t._v("和"),a("code",[t._v("===")]),t._v("、以及"),a("code",[t._v("Object.is")]),t._v("的区别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1."),a("code",[t._v("==")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("会进行强制类型转换（!= 也是）")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("在转换不同的数据类型时，相等和不相等操作符遵循下列基本规则:")])]),t._v(" "),a("ul",[a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false 转换为 0，而 true 转换为 1")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值;")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf() 方法，用得到的基本类型值按照前面的规则进行比较; 这两个操作符在进行比较时则要遵循下列规则。")])])]),t._v(" "),a("li",[a("p",[t._v("6.null 和 undefined 是相等的。")])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[t._v("要比较相等性之前，不能将 null 和 undefined 转换成其他任何值。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"8"}},[a("li",[t._v("如果有一个操作数是 NaN，则相等操作符返回 false，而不相等操作符返回 true。重要提示⚠️：即使两个操作数都是 NaN，相等操作符也返回 false; 因为按照规则，NaN 不等于 NaN。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"9"}},[a("li",[t._v("如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true; 否则，返回 false。")])])])])])])]),t._v(" "),a("li",[a("p",[t._v("2."),a("code",[t._v("===")]),t._v("：全等于，不转换")])]),t._v(" "),a("li",[a("p",[t._v("3."),a("code",[t._v("Object.is")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("也不会进行强制类型转换。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("与"),a("code",[t._v("===")]),t._v("有以下几点不同：")])]),t._v(" "),a("ul",[a("li",[t._v("1."),a("code",[t._v("+0===-0")]),t._v("，"),a("code",[t._v("Object.is(+0, -0)")]),t._v("为 false")]),t._v(" "),a("li",[t._v("2."),a("code",[t._v("NaN !== NaN")]),t._v("，"),a("code",[t._v("Object.is(NaN, NaN)")]),t._v("为 true")])])])])])]),t._v(" "),a("h4",{attrs:{id:"_2-new-操作符做了哪些事情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-new-操作符做了哪些事情"}},[t._v("#")]),t._v(" (2).new 操作符做了哪些事情")]),t._v(" "),a("p",[t._v("用 new 操作符调用构造函数实际上会经历以下 4 个步骤:")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("创建一个新对象;")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("将构造函数的作用域赋给新对象 (因此 this 就指向了这个新对象);")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("执行构造函数中的代码 (为这个新对象添加属性);")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("返回新对象。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("将构造函数的 prototype 关联到实例的__proto__")])])])]),t._v(" "),a("h3",{attrs:{id:"_14-数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-数组"}},[t._v("#")]),t._v(" 14. 数组")]),t._v(" "),a("h4",{attrs:{id:"_1-数组常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数组常用方法"}},[t._v("#")]),t._v(" (1). 数组常用方法")]),t._v(" "),a("p",[t._v("push()，pop()，shift()，unshift()，splice()，sort()，reverse()，map() 等")]),t._v(" "),a("h4",{attrs:{id:"_2-数组去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数组去重"}},[t._v("#")]),t._v(" (2). 数组去重")]),t._v(" "),a("p",[t._v("要注意的是对象咋去重")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("双重循环")])]),t._v(" "),a("p",[t._v("每次插入一个元素的时候都和前面的每个元素比较一下")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var array = [1, 1, '1', '1'];\n\nfunction unique(array) {\n    // res用来存储结果\n    var res = [];\n    for (var i = 0, arrayLen = array.length; i < arrayLen; i++) {\n        for (var j = 0, resLen = res.length; j < resLen; j++ ) {\n            if (array[i] === res[j]) {\n                break;\n            }\n        }\n        // 如果array[i]是唯一的，那么执行完循环，j等于resLen\n        if (j === resLen) {\n            res.push(array[i])\n        }\n    }\n    return res;\n}\n\nconsole.log(unique(array)); // [1, \"1\"]\n复制代码\n")])])])]),t._v(" "),a("li",[a("p",[t._v("2."),a("code",[t._v("indexOf")])]),t._v(" "),a("p",[t._v("原理和双重循环是一样的")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var array = [1, 1, '1'];\n\nfunction unique(array) {\n    var res = [];\n    for (var i = 0, len = array.length; i < len; i++) {\n        var current = array[i];\n        if (res.indexOf(current) === -1) {\n            res.push(current)\n        }\n    }\n    return res;\n}\n\nconsole.log(unique(array));\n复制代码\n")])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("排序后去重")])]),t._v(" "),a("p",[t._v("对于排好序的数组，可以将每个元素与前一个比较")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var array = [1, 1, '1'];\n\nfunction unique(array) {\n    var res = [];\n    var sortedArray = array.concat().sort();\n    var seen;\n    for (var i = 0, len = sortedArray.length; i < len; i++) {\n        // 如果是第一个元素或者相邻的元素不相同\n        if (!i || seen !== sortedArray[i]) {\n            res.push(sortedArray[i])\n        }\n        seen = sortedArray[i];\n    }\n    return res;\n}\n\nconsole.log(unique(array));\n复制代码\n")])])])]),t._v(" "),a("li",[a("p",[t._v("4.Object 键值对")]),t._v(" "),a("p",[t._v("把每一个元素存成 object 的 key。例如 "),a("code",[t._v("['a']")]),t._v("，存成"),a("code",[t._v("{'a': true}")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var array = [1, 2, 1, 1, '1'];\n\nfunction unique(array) {\n    var obj = {};\n    return array.filter(function(item, index, array){\n        return obj.hasOwnProperty(item) ? false : (obj[item] = true)\n    })\n}\n\nconsole.log(unique(array)); // [1, 2]\n复制代码\n")])])]),a("p",[t._v("我们可以发现，是有问题的，因为 1 和 '1' 是不同的，但是这种方法会判断为同一个值，这是因为对象的键值只能是字符串，所以我们可以使用 "),a("code",[t._v("typeof item + item")]),t._v(" 拼成字符串作为 key 值来避免这个问题：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var array = [1, 2, 1, 1, '1'];\n\nfunction unique(array) {\n    var obj = {};\n    return array.filter(function(item, index, array){\n        return obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] = true)\n    })\n}\n\nconsole.log(unique(array)); // [1, 2, \"1\"]\n复制代码\n")])])]),a("p",[t._v("然而，即便如此，我们依然无法正确区分出两个对象，比如 {value: 1} 和 {value: 2}，因为 "),a("code",[t._v("typeof item + item")]),t._v(" 的结果都会是 "),a("code",[t._v("object[object Object]")]),t._v("，不过我们可以使用 JSON.stringify 将对象序列化：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var array = [{value: 1}, {value: 1}, {value: 2}];\n\nfunction unique(array) {\n    var obj = {};\n    return array.filter(function(item, index, array){\n        console.log(typeof item + JSON.stringify(item))\n        return obj.hasOwnProperty(typeof item + JSON.stringify(item)) ? false : (obj[typeof item + JSON.stringify(item)] = true)\n    })\n}\n\nconsole.log(unique(array)); // [{value: 1}, {value: 2}]\n复制代码\n")])])])]),t._v(" "),a("li",[a("p",[t._v("5.ES6 Set 去重")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function unique(array) {\n   return Array.from(new Set(array));\n}\n复制代码\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function unique(array) {\n    return [...new Set(array)];\n}\n复制代码\n")])])])]),t._v(" "),a("li",[a("p",[t._v("6.ES6 Map")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function unique (arr) {\n    const seen = new Map()\n    return arr.filter((a) => !seen.has(a) && seen.set(a, 1))\n}\n复制代码\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"三、高级技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、高级技巧"}},[t._v("#")]),t._v(" 三、高级技巧")]),t._v(" "),a("h3",{attrs:{id:"_1-防抖节流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-防抖节流"}},[t._v("#")]),t._v(" 1. 防抖节流")]),t._v(" "),a("h4",{attrs:{id:"_1-节流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-节流"}},[t._v("#")]),t._v(" (1). 节流")]),t._v(" "),a("p",[t._v("在 n 秒内只会执行一次，所以节流会稀释函数的执行频率")]),t._v(" "),a("h4",{attrs:{id:"_2-防抖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-防抖"}},[t._v("#")]),t._v(" (2). 防抖")]),t._v(" "),a("p",[t._v("按最后一次算。比如说 “停止输入 5s 后才发送请求”")]),t._v(" "),a("h3",{attrs:{id:"_3-数组展开"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-数组展开"}},[t._v("#")]),t._v(" 3. 数组展开")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("递归")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction flat1 (arr) {\n    let result = []\n    arr.forEach(element => {\n        if (Array.isArray(element)) {\n            result = result.concat(flat1(element))\n        } else {\n            result.push(element)\n        }\n    });\n    return result\n}\n复制代码\n")])])]),a("ul",[a("li",[t._v("2.toString")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function flat2 (arr) {\n    // 有缺陷，toString 后无法保持之前的类型\n    return arr.toString().split(',')\n}\n复制代码\n")])])]),a("ul",[a("li",[t._v("3.reduce")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction flat3 (arr) {\n    // 本质和 flat1 一样的，都是递归\n    return arr.reduce((pre, next) => {\n        return pre.concat(Array.isArray(next) ? flat3(next) : next)\n    }, [])\n}\n复制代码\n")])])]),a("ul",[a("li",[t._v("4.rest 运算符")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction flat4 (arr) {\n    while (arr.some(item => Array.isArray(item))) {\n        // 相当于 [].concat('1', 2, [3, 4])\n        // concat 方法本身就会把参数中的数组展开\n        arr = [].concat(...arr);\n    }\n    return arr;\n}\n复制代码\n")])])]),a("ul",[a("li",[t._v("5.ES6 flat")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction flat5 (arr: any[]) {\n    // flat() 方法会移除数组中的空项\n    return arr.flat(Infinity)\n}\n复制代码\n")])])]),a("h3",{attrs:{id:"_4-拖放"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-拖放"}},[t._v("#")]),t._v(" 4. 拖放")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('微信公众号：世界上有意思的事\n\nvar DragDrop = function(){\n  var dragging = null; \n  function handleEvent(event){\n    \n    //获取事件和目标\n    event = EventUtil.getEvent(event);\n    var target = EventUtil.getTarget(event);\n    \n    //确定事件类型 \n    switch(event.type){\n      case "mousedown":\n        if (target.className.indexOf("draggable") > -1){\n          dragging = target; \n        }\n        break;\n      case "mousemove":\n        if (dragging !== null){ \n          //指定位置\n          dragging.style.left = event.clientX + "px";\n          dragging.style.top = event.clientY + "px";\n        }\n        break;\n      case "mouseup": \n        dragging = null;\n        break; \n    }\n  };\n  //公共接口 \n  return {\n    enable: function(){\n      EventUtil.addHandler(document, "mousedown", handleEvent);\n      EventUtil.addHandler(document, "mousemove", handleEvent);\n      EventUtil.addHandler(document, "mouseup", handleEvent);\n    },\n    disable: function(){\n      EventUtil.removeHandler(document, "mousedown", handleEvent);\n      EventUtil.removeHandler(document, "mousemove", handleEvent);\n      EventUtil.removeHandler(document, "mouseup", handleEvent);\n    }\n  }\n}();\n复制代码\n')])])]),a("ul",[a("li",[a("p",[t._v('1.DragDrop 对象封装了拖放的所有基本功能。这是一个单例对象，并使用了模块模式来隐藏某些实 现细节。dragging 变量起初是 null，将会存放被拖动的元素，所以当该变量不为 null 时，就知道正 在拖动某个东西。handleEvent() 函数处理拖放功能中的所有的三个鼠标事件。它首先获取 event 对 象和事件目标的引用。之后，用一个 switch 语句确定要触发哪个事件样式。当 mousedown 事件发生 时，会检查 target 的 class 是否包含 "draggable" 类，如果是，那么将 target 存放到 dragging 中。这个技巧可以很方便地通过标记语言而非 JavaScript 脚本来确定可拖动的元素。')])]),t._v(" "),a("li",[a("p",[t._v("2.handleEvent() 的 mousemove 情况和前面的代码一样，不过要检查 dragging 是否为 null。当 它不是 null，就知道 dragging 就是要拖动的元素，这样就会把它放到恰当的位置上。mouseup 情况 就仅仅是将 dragging 重置为 null，让 mousemove 事件中的判断失效。")])]),t._v(" "),a("li",[a("p",[t._v("3.DragDrop 还有两个公共方法: enable() 和 disable()，它们只是相应添加和删除所有的事件处 理程序。这两个函数提供了额外的对拖放功能的控制手段。")])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v('要使用 DragDrop 对象，只要在页面上包含这些代码并调用 enable()。拖放会自动针对所有包含 "draggable" 类的元素启用，如下例所示:')])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<div> </div>\n复制代码\n")])])]),a("p",[t._v("注意为了元素能被拖放，它必须是绝对定位的。")])])]),t._v(" "),a("h3",{attrs:{id:"_5-once"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-once"}},[t._v("#")]),t._v(" 5.once")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction once (func) {\n  var done;\n  return function () {\n    if (!done) {\n      func.apply(null, arguments)\n      done = true\n    }\n  }\n}\n复制代码\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nfunction onlyDoOne = once(function() {\n  console.log('1')\n})\n复制代码\n")])])]),a("h3",{attrs:{id:"_6-promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-promise"}},[t._v("#")]),t._v(" 6.promise")]),t._v(" "),a("p",[a("code",[t._v("Promise")]),t._v(" 是一个对象，保存着未来将要结束的事件，她有两个特征:")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("对象的状态不受外部影响，"),a("code",[t._v("Promise")]),t._v(" 对象代表一个异步操作，有三种状态，pending 进行中，fulfilled 已成功，rejected 已失败，只有异步操作的结果，才可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也就是 promise 名字的由来")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("一旦状态改变，就不会再变，"),a("code",[t._v("Promise")]),t._v("对象状态改变只有两种可能，从 pending 改到 fulfilled 或者从 pending 改到 rejected，只要这两种情况发生，状态就凝固了，不会再改变，这个时候就称为定型 resolved")])])])]),t._v(" "),a("h3",{attrs:{id:"_7-sleep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-sleep"}},[t._v("#")]),t._v(" 7.sleep")]),t._v(" "),a("p",[t._v("用 "),a("code",[t._v("Promise")])]),t._v(" "),a("ol",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function sleep (ms) {\n  return new Promise((resolve) => {\n    window.setTimeout(resolve, ms)\n  })\n}\n\nsleep(1000).then(()=>{\n  console.log('已经 sleep 1000ms')\n})\n复制代码\n")])])])]),t._v(" "),a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function sleep (ms) {\n  return new Promise((resolve) => {\n    window.setTimeout(resolve, ms)\n  })\n}\n\n// 使用async/await调用\nasync function test () {\n  var example = await sleep(1000)\n  console.log('已经 sleep 1000ms')\n}\n复制代码\n")])])])]),t._v(" "),a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 使用 generator 定义 sleep 函数\nfunction *sleep (ms) {\n  yield new Promise((resolve) => {\n    window.setTimeout(resolve, ms)\n  })\n}\nsleep(1000).next().value.then(()=>{\n  console.log('已经 sleep 1000ms')\n})\n复制代码\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"四、浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、浏览器"}},[t._v("#")]),t._v(" 四、浏览器")]),t._v(" "),a("h3",{attrs:{id:"_1-缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存"}},[t._v("#")]),t._v(" 1. 缓存")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/11/17168fa9fe83e22b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),t._v(" "),a("h4",{attrs:{id:"_1-按缓存位置分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-按缓存位置分"}},[t._v("#")]),t._v(" (1). 按缓存位置分")]),t._v(" "),a("ul",[a("li",[t._v("1.Service Worker\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("有两种情况会导致这个缓存中的资源被清除：手动调用 API "),a("code",[t._v("cache.delete(resource)")]),t._v(" 或者容量超过限制，被浏览器全部清空。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("如果 Service Worker 没能命中缓存，一般情况会使用 "),a("code",[t._v("fetch()")]),t._v(" 方法继续获取资源。这时候，浏览器就去 memory cache 或者 disk cache 进行下一次找缓存的工作了。注意：经过 Service Worker 的 "),a("code",[t._v("fetch()")]),t._v(" 方法获取的资源，即便它并没有命中 Service Worker 缓存，甚至实际走了网络请求，也会标注为 "),a("code",[t._v("from ServiceWorker")]),t._v("。")])])])])]),t._v(" "),a("li",[t._v("2.Memory Cache：tab 关闭则失效\n"),a("ul",[a("li",[t._v("1.memory cache 机制保证了一个页面中如果有两个相同的请求 (例如两个 "),a("code",[t._v("src")]),t._v(" 相同的 "),a("code",[t._v("image")]),t._v("，两个 "),a("code",[t._v("href")]),t._v(" 相同的 "),a("code",[t._v("link")]),t._v(") 都实际只会被请求最多一次，避免浪费。")]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("在从 memory cache 获取缓存内容时，浏览器会忽视例如 "),a("code",[t._v("max-age=0")]),t._v(", "),a("code",[t._v("no-cache")]),t._v(" 等头部配置。例如页面上存在几个相同 "),a("code",[t._v("src")]),t._v(" 的图片，即便它们可能被设置为不缓存，但依然会从 memory cache 中读取。这是因为 memory cache 只是短期使用，大部分情况生命周期只有一次浏览而已。而 "),a("code",[t._v("max-age=0")]),t._v(" 在语义上普遍被解读为 “不要在下次浏览时使用”，所以和 memory cache 并不冲突。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("但如果站长是真心不想让一个资源进入缓存，就连短期也不行，那就需要使用 "),a("code",[t._v("no-store")]),t._v("。存在这个头部配置的话，即便是 memory cache 也不会存储，自然也不会从中读取了。")])])])])]),t._v(" "),a("li",[t._v("3.Disk Cache：disk cache 会严格根据 HTTP 头信息中的各类字段来判定哪些资源可以缓存，哪些资源不可以缓存；哪些资源是仍然可用的，哪些资源是过时需要重新请求的。当命中缓存之后，浏览器会从硬盘中读取资源，虽然比起从内存中读取慢了一些，但比起网络请求还是快了不少的。"),a("strong",[t._v("绝大部分的缓存都来自 disk cache")]),t._v("。")]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("网络请求：如果一个请求在上述 3 个位置都没有找到缓存，那么浏览器会正式发送网络请求去获取内容。之后容易想到，为了提升之后请求的缓存命中率，自然要把这个资源添加到缓存中去。具体来说：")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("根据 Service Worker 中的 handler 决定是否存入 Cache Storage (额外的缓存位置)。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("根据 HTTP 头部的相关字段 ("),a("code",[t._v("Cache-control")]),t._v(", "),a("code",[t._v("Pragma")]),t._v(" 等) 决定是否存入 disk cache")])])]),t._v(" "),a("li",[t._v("3.memory cache 保存一份资源 "),a("strong",[t._v("的引用")]),t._v("，以备下次使用。")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-按失效策略分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-按失效策略分"}},[t._v("#")]),t._v(" (2). 按失效策略分")]),t._v(" "),a("blockquote",[a("p",[t._v("memory cache 是浏览器为了加快读取缓存速度而进行的自身的优化行为，不受开发者控制，也不受 HTTP 协议头的约束，算是一个黑盒。Service Worker 是由开发者编写的额外的脚本，且缓存位置独立，出现也较晚，使用还不算太广泛。所以我们平时最为熟悉的其实是 "),a("strong",[t._v("disk cache")]),t._v("，也叫 "),a("strong",[t._v("HTTP cache")]),t._v(" (因为不像 memory cache，它遵守 HTTP 协议头中的字段)。平时所说的"),a("strong",[t._v("强制缓存（强缓存），对比缓存（协商缓存）")]),t._v("，以及 "),a("code",[t._v("Cache-Control")]),t._v(" 等，也都归于此类。")])]),t._v(" "),a("h3",{attrs:{id:"强制缓存-也叫强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制缓存-也叫强缓存"}},[t._v("#")]),t._v(" 强制缓存 (也叫强缓存)")]),t._v(" "),a("p",[a("strong",[t._v("强制缓存直接减少请求数，是提升最大的缓存策略。")]),t._v(" 它的优化覆盖了请求、处理、响应三个阶段")]),t._v(" "),a("p",[t._v("可以造成强制缓存的字段是 "),a("code",[t._v("Cache-control")]),t._v(" 和 "),a("code",[t._v("Expires")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Expires：")]),t._v(" "),a("ul",[a("li",[t._v("HTTP1.0")]),t._v(" "),a("li",[t._v("由于是绝对时间，用户可能会将客户端本地的时间进行修改，而导致浏览器判断缓存失效，重新请求该资源。此外，即使不考虑自信修改，时差或者误差等因素也可能造成客户端与服务端的时间不一致，致使缓存失效。")]),t._v(" "),a("li",[t._v("写法太复杂了。表示时间的字符串多个空格，少个字母，都会导致非法属性从而设置失效")])])]),t._v(" "),a("li",[a("p",[t._v("Cache-control")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("HTTP1.1")])]),t._v(" "),a("li",[a("p",[t._v("优先级高")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("max-age")]),t._v("：即最大有效时间")]),t._v(" "),a("p",[a("code",[t._v("must-revalidate")]),t._v("：如果超过了 "),a("code",[t._v("max-age")]),t._v(" 的时间，浏览器必须向服务器发送请求，验证资源是否还有效。")]),t._v(" "),a("p",[a("code",[t._v("no-cache")]),t._v("：虽然字面意思是 “不要缓存”，但实际上还是要求客户端缓存内容的，只是是否使用这个内容由后续的对比来决定。")]),t._v(" "),a("p",[a("code",[t._v("no-store")]),t._v(": 真正意义上的 “不要缓存”。所有内容都不走缓存，包括强制和对比。")]),t._v(" "),a("p",[a("code",[t._v("public")]),t._v("：所有的内容都可以被缓存 (包括客户端和代理服务器， 如 CDN)")]),t._v(" "),a("p",[a("code",[t._v("private")]),t._v("：所有的内容只有客户端才可以缓存，代理服务器不能缓存。默认值。")])])])])]),t._v(" "),a("h3",{attrs:{id:"对比缓存-协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对比缓存-协商缓存"}},[t._v("#")]),t._v(" 对比缓存 (协商缓存)")]),t._v(" "),a("p",[a("strong",[t._v("对比缓存在请求数上和没有缓存是一致的")]),t._v("，但如果是 304 的话，返回的仅仅是一个状态码而已，并没有实际的文件内容，因此 "),a("strong",[t._v("在响应体体积上的节省是它的优化点")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("Last-Modified & If-Modified-Since\n"),a("ul",[a("li",[t._v("服务器通过 "),a("code",[t._v("Last-Modified")]),t._v(" 字段告知客户端，资源最后一次被修改的时间")]),t._v(" "),a("li",[t._v("浏览器将这个值和内容一起记录在缓存数据库中。")]),t._v(" "),a("li",[t._v("下一次请求相同资源时时，浏览器从自己的缓存中找出 “不确定是否过期的” 缓存。因此在请求头中将上次的 "),a("code",[t._v("Last-Modified")]),t._v(" 的值写入到请求头的 "),a("code",[t._v("If-Modified-Since")]),t._v(" 字段")]),t._v(" "),a("li",[t._v("服务器会将 "),a("code",[t._v("If-Modified-Since")]),t._v(" 的值与 "),a("code",[t._v("Last-Modified")]),t._v(" 字段进行对比。如果相等，则表示未修改，响应 304；反之，则表示修改了，响应 200 状态码，并返回数据。")]),t._v(" "),a("li",[t._v("如果资源更新的速度是秒以下单位，那么该缓存是不能被使用的，因为它的时间单位最低是秒。")]),t._v(" "),a("li",[t._v("如果文件是通过服务器动态生成的，那么该方法的更新时间永远是生成的时间，尽管文件可能没有变化，所以起不到缓存的作用。")])])]),t._v(" "),a("li",[t._v("Etag & If-None-Match\n"),a("ul",[a("li",[a("strong",[t._v("Etag 的优先级高于 Last-Modified")])]),t._v(" "),a("li",[a("code",[t._v("Etag")]),t._v(" 存储的是文件的特殊标识 (一般都是 hash 生成的)，服务器存储着文件的 "),a("code",[t._v("Etag")]),t._v(" 字段。")]),t._v(" "),a("li",[t._v("之后的流程和 "),a("code",[t._v("Last-Modified")]),t._v(" 一致，只是 "),a("code",[t._v("Last-Modified")]),t._v(" 字段和它所表示的更新时间改变成了 "),a("code",[t._v("Etag")]),t._v(" 字段和它所表示的文件 hash，把 "),a("code",[t._v("If-Modified-Since")]),t._v(" 变成了 "),a("code",[t._v("If-None-Match")]),t._v("。")]),t._v(" "),a("li",[t._v("服务器同样进行比较，命中返回 304, 不命中返回新资源和 200。")])])])]),t._v(" "),a("h4",{attrs:{id:"_3-ajax-解决浏览器缓存问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-ajax-解决浏览器缓存问题"}},[t._v("#")]),t._v(" (3).Ajax 解决浏览器缓存问题")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v('在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader("If-Modified-Since","0")。')])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v('在 ajax 发送请求前加上 anyAjaxObj.setRequestHeader("Cache-Control","no-cache")。')])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v('在 URL 后面加上一个随机数： "fresh=" + Math.random()。')])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v('在 URL 后面加上时间搓："nowtime=" + new Date().getTime()。')])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("如果是使用 jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有 ajax 都会执行这条语句就是不需要保存缓存记录。")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-浏览器渲染原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器渲染原理"}},[t._v("#")]),t._v(" 2. 浏览器渲染原理")]),t._v(" "),a("h4",{attrs:{id:"_1-render-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-render-tree"}},[t._v("#")]),t._v(" (1).Render Tree")]),t._v(" "),a("ul",[a("li",[t._v("不显示（"),a("code",[t._v("display: none")]),t._v("）的元素不会被生成")]),t._v(" "),a("li",[t._v("有了"),a("code",[t._v("RenderTree")]),t._v("，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置（布局），最后把节点绘制到页面上（绘制）。")]),t._v(" "),a("li",[t._v("由于浏览器使用流式布局，对"),a("code",[t._v("Render Tree")]),t._v("的计算通常只需要遍历一次就可以完成，"),a("strong",[t._v("但"),a("code",[t._v("table")]),t._v("及其内部元素除外，他们可能需要多次计算，通常要花 3 倍于同等元素的时间，这也是为什么要避免使用"),a("code",[t._v("table")]),t._v("布局的原因之一")]),t._v("。")])]),t._v(" "),a("h4",{attrs:{id:"_2-重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-重绘"}},[t._v("#")]),t._v(" (2). 重绘")]),t._v(" "),a("p",[t._v("由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘，例如"),a("code",[t._v("outline")]),t._v(", "),a("code",[t._v("visibility")]),t._v(", "),a("code",[t._v("color")]),t._v("、"),a("code",[t._v("background-color")]),t._v("等，重绘的代价是高昂的，因为浏览器必须验证 DOM 树上其他节点元素的可见性。")]),t._v(" "),a("h4",{attrs:{id:"_3-回流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-回流"}},[t._v("#")]),t._v(" (3) 回流")]),t._v(" "),a("p",[t._v("回流是布局或者几何属性需要改变就称为回流。回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其所有子元素以及 DOM 中紧随其后的节点、祖先节点元素的随后的回流。")]),t._v(" "),a("h4",{attrs:{id:"_4-浏览器优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器优化"}},[t._v("#")]),t._v(" (4). 浏览器优化")]),t._v(" "),a("p",[t._v("现代浏览器大多都是通过队列机制来批量更新布局，浏览器会把修改操作放在队列中，至少一个浏览器刷新（即 16.6ms）才会清空队列，但当你"),a("strong",[t._v("获取布局信息的时候，队列中可能有会影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流与重绘来确保返回正确的值")]),t._v("。")]),t._v(" "),a("p",[t._v("主要包括以下属性或方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("offsetTop")]),t._v("、"),a("code",[t._v("offsetLeft")]),t._v("、"),a("code",[t._v("offsetWidth")]),t._v("、"),a("code",[t._v("offsetHeight")])]),t._v(" "),a("li",[a("code",[t._v("scrollTop")]),t._v("、"),a("code",[t._v("scrollLeft")]),t._v("、"),a("code",[t._v("scrollWidth")]),t._v("、"),a("code",[t._v("scrollHeight")])]),t._v(" "),a("li",[a("code",[t._v("clientTop")]),t._v("、"),a("code",[t._v("clientLeft")]),t._v("、"),a("code",[t._v("clientWidth")]),t._v("、"),a("code",[t._v("clientHeight")])]),t._v(" "),a("li",[a("code",[t._v("width")]),t._v("、"),a("code",[t._v("height")])]),t._v(" "),a("li",[a("code",[t._v("getComputedStyle()")])]),t._v(" "),a("li",[a("code",[t._v("getBoundingClientRect()")])])]),t._v(" "),a("p",[t._v("所以，我们应该避免频繁的使用上述的属性，他们都会强制渲染刷新队列。")]),t._v(" "),a("h4",{attrs:{id:"_5-减少重绘与回流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-减少重绘与回流"}},[t._v("#")]),t._v(" (5). 减少重绘与回流")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1.CSS")]),t._v(" "),a("ul",[a("li",[a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("使用 "),a("code",[t._v("transform")]),t._v(" 替代 "),a("code",[t._v("top")])])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[t._v("使用 "),a("code",[t._v("visibility")]),t._v(" 替换 "),a("code",[t._v("display: none")])]),t._v(" ，因为前者只会引起重绘，后者会引发回流（改变了布局")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[a("strong",[t._v("避免使用"),a("code",[t._v("table")]),t._v("布局")]),t._v("，可能很小的一个小改动会造成整个 "),a("code",[t._v("table")]),t._v(" 的重新布局。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[a("strong",[t._v("尽可能在"),a("code",[t._v("DOM")]),t._v("树的最末端改变"),a("code",[t._v("class")])]),t._v("，回流是不可避免的，但可以减少其影响。尽可能在 DOM 树的最末端改变 class，可以限制了回流的范围，使其影响尽可能少的节点。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[a("strong",[t._v("避免设置多层内联样式")]),t._v("，CSS 选择符"),a("strong",[t._v("从右往左")]),t._v("匹配查找，避免节点层级过多。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<div>\n  <a> <span></span> </a>\n</div>\n<style>\n  span {\n    color: red;\n  }\n  div > a > span {\n    color: red;\n  }\n</style>\n复制代码\n")])])]),a("p",[t._v("对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 "),a("code",[t._v("span")]),t._v(" 标签然后设置颜色，但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 "),a("code",[t._v("span")]),t._v(" 标签，然后找到 "),a("code",[t._v("span")]),t._v(" 标签上的 "),a("code",[t._v("a")]),t._v(" 标签，最后再去找到 "),a("code",[t._v("div")]),t._v(" 标签，然后给符合这种条件的 "),a("code",[t._v("span")]),t._v(" 标签设置颜色，这样的递归过程就很复杂。所以我们应该尽可能的避免写"),a("strong",[t._v("过于具体")]),t._v("的 CSS 选择器，然后对于 HTML 来说也尽量少的添加无意义标签，保证"),a("strong",[t._v("层级扁平")]),t._v("。")])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[a("strong",[t._v("将动画效果应用到"),a("code",[t._v("position")]),t._v("属性为"),a("code",[t._v("absolute")]),t._v("或"),a("code",[t._v("fixed")]),t._v("的元素上")]),t._v("，避免影响其他元素的布局，这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 "),a("code",[t._v("requestAnimationFrame")]),t._v("，详见"),a("a",{attrs:{href:"https://github.com/LuNaHaiJiao/blog/issues/30",target:"_blank",rel:"noopener noreferrer"}},[t._v("探讨 requestAnimationFrame"),a("OutboundLink")],1),t._v("。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"8"}},[a("li",[a("strong",[t._v("避免使用"),a("code",[t._v("CSS")]),t._v("表达式")]),t._v("，可能会引发回流。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"9"}},[a("li",[a("strong",[t._v("将频繁重绘或者回流的节点设置为图层")]),t._v("，图层能够阻止该节点的渲染行为影响别的节点，例如"),a("code",[t._v("will-change")]),t._v("、"),a("code",[t._v("video")]),t._v("、"),a("code",[t._v("iframe")]),t._v("等标签，浏览器会自动将该节点变为图层。")])])]),t._v(" "),a("li",[a("p",[t._v("10."),a("strong",[t._v("CSS3 硬件加速（GPU 加速）")]),t._v("，使用 css3 硬件加速，可以让"),a("code",[t._v("transform")]),t._v("、"),a("code",[t._v("opacity")]),t._v("、"),a("code",[t._v("filters")]),t._v("这些动画不会引起回流重绘 。但是对于动画的其它属性，比如"),a("code",[t._v("background-color")]),t._v("这些，还是会引起回流重绘的，不过它还是可以提升这些动画的性能。")])])])]),t._v(" "),a("li",[a("p",[t._v("2.JavaScript")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[a("strong",[t._v("避免频繁操作样式")]),t._v("，最好一次性重写"),a("code",[t._v("style")]),t._v("属性，或者将样式列表定义为"),a("code",[t._v("class")]),t._v("并一次性更改"),a("code",[t._v("class")]),t._v("属性。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("避免频繁操作"),a("code",[t._v("DOM")])]),t._v("，创建一个"),a("code",[t._v("documentFragment")]),t._v("，在它上面应用所有"),a("code",[t._v("DOM操作")]),t._v("，最后再把它添加到文档中。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[t._v("避免频繁读取会引发回流 / 重绘的属性")]),t._v("，如果确实需要多次使用，就用一个变量缓存起来。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[a("strong",[t._v("对具有复杂动画的元素使用绝对定位")]),t._v("，使它脱离文档流，否则会引起父元素及后续元素频繁回流。")])])])])])]),t._v(" "),a("h4",{attrs:{id:"_6-js-什么时候解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-js-什么时候解析"}},[t._v("#")]),t._v(" (6).JS 什么时候解析？")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("<script>")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("渲染过程中，如果遇到 JS 就停止渲染，执行 JS 代码。")])]),t._v(" "),a("li",[a("p",[t._v("如果 JS 需要操作 CSSOM，则会先让 CSSOM 构建完，再执行 JS，最后构建 DOM")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("<script async>")])]),t._v(" "),a("ul",[a("li",[t._v("异步执行引入的 JavaScript，加载完成后就执行 JS，阻塞 DOM")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("<script defer>")])]),t._v(" "),a("ul",[a("li",[t._v("延迟执行。"),a("strong",[t._v("载入 JavaScript 文件时不阻塞 HTML 的解析，执行阶段被放到 HTML 标签解析完成之后。")])])])])]),t._v(" "),a("h2",{attrs:{id:"五、计算机基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、计算机基础"}},[t._v("#")]),t._v(" 五、计算机基础")]),t._v(" "),a("h3",{attrs:{id:"_1-计算机网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-计算机网络"}},[t._v("#")]),t._v(" 1. 计算机网络")]),t._v(" "),a("h4",{attrs:{id:"_1-tcp-三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-tcp-三次握手"}},[t._v("#")]),t._v(" (1).TCP 三次握手")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("第一次握手：起初两端都处于 CLOSED 关闭状态，Client 将标志位 SYN 置为 1，随机产生一个值 seq=x，并将该数据包发送给 Server，Client 进入 SYN-SENT 状态，等待 Server 确认；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("第二次握手：Server 收到数据包后由标志位 SYN=1 得知 Client 请求建立连接，Server 将标志位 SYN 和 ACK 都置为 1，ack=x+1，随机产生一个值 seq=y，并将该数据包发送给 Client 以确认连接请求，Server 进入 SYN-RCVD 状态，此时操作系统为该 TCP 连接分配 TCP 缓存和变量；")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("第三次握手：Client 收到确认后，检查 ack 是否为 x+1，ACK 是否为 1，如果正确则将标志位 ACK 置为 1，ack=y+1，并且此时操作系统为该 TCP 连接分配 TCP 缓存和变量，并将该数据包发送给 Server，Server 检查 ack 是否为 y+1，ACK 是否为 1，如果正确则连接建立成功，Client 和 Server 进入 ESTABLISHED 状态，完成三次握手，随后 Client 和 Server 就可以开始传输数据。")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-cdn-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-cdn-原理"}},[t._v("#")]),t._v(" (2).CDN 原理")]),t._v(" "),a("p",[t._v("CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应")]),t._v(" "),a("h4",{attrs:{id:"_4-dns-解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-dns-解析"}},[t._v("#")]),t._v(" (4).DNS 解析")]),t._v(" "),a("ul",[a("li",[t._v("浏览器缓存：浏览器会按照一定的频率缓存 DNS 记录。")]),t._v(" "),a("li",[t._v("操作系统缓存：如果浏览器缓存中找不到需要的 DNS 记录，那就去操作系统中找。")]),t._v(" "),a("li",[t._v("路由缓存：路由器也有 DNS 缓存。")]),t._v(" "),a("li",[t._v("ISP 的 DNS 服务器：ISP 是互联网服务提供商 (Internet Service Provider) 的简称，ISP 有专门的 DNS 服务器应对 DNS 查询请求。")]),t._v(" "),a("li",[t._v("根服务器：ISP 的 DNS 服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS 服务器先问根域名服务器. com 域名服务器的 IP 地址，然后再问. baidu 域名服务器，依次类推）")])]),t._v(" "),a("h4",{attrs:{id:"_5-http-常用请求头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-http-常用请求头"}},[t._v("#")]),t._v(" (5).HTTP 常用请求头")]),t._v(" "),a("p",[t._v("可以将 http 首部分为通用首部，请求首部，响应首部，实体首部")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("协议头")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Accept")]),t._v(" "),a("td",[t._v("可接受的响应内容类型（Content-Types）。")])]),t._v(" "),a("tr",[a("td",[t._v("Accept-Charset")]),t._v(" "),a("td",[t._v("可接受的字符集")])]),t._v(" "),a("tr",[a("td",[t._v("Accept-Encoding")]),t._v(" "),a("td",[t._v("可接受的响应内容的编码方式。")])]),t._v(" "),a("tr",[a("td",[t._v("Accept-Language")]),t._v(" "),a("td",[t._v("可接受的响应内容语言列表。")])]),t._v(" "),a("tr",[a("td",[t._v("Accept-Datetime")]),t._v(" "),a("td",[t._v("可接受的按照时间来表示的响应内容版本")])]),t._v(" "),a("tr",[a("td",[t._v("Authorization")]),t._v(" "),a("td",[t._v("用于表示 HTTP 协议中需要认证资源的认证信息")])]),t._v(" "),a("tr",[a("td",[t._v("Cache-Control")]),t._v(" "),a("td",[t._v("用来指定当前的请求 / 回复中的，是否使用缓存机制。")])]),t._v(" "),a("tr",[a("td",[t._v("Connection")]),t._v(" "),a("td",[t._v("客户端（浏览器）想要优先使用的连接类型")])]),t._v(" "),a("tr",[a("td",[t._v("Cookie")]),t._v(" "),a("td",[t._v("由之前服务器通过 Set-Cookie（见下文）设置的一个 HTTP 协议 Cookie")])]),t._v(" "),a("tr",[a("td",[t._v("Content-Length")]),t._v(" "),a("td",[t._v("以 8 进制表示的请求体的长度")])]),t._v(" "),a("tr",[a("td",[t._v("Content-MD5")]),t._v(" "),a("td",[t._v("请求体的内容的二进制 MD5 散列值（数字签名），以 Base64 编码的结果")])]),t._v(" "),a("tr",[a("td",[t._v("Content-Type")]),t._v(" "),a("td",[t._v("请求体的 MIME 类型 （用于 POST 和 PUT 请求中）")])]),t._v(" "),a("tr",[a("td",[t._v("Date")]),t._v(" "),a("td",[t._v("发送该消息的日期和时间（以 "),a("a",{attrs:{href:"https://www.nowcoder.com/tutorial/96/24304825a0c04ea9a53cdb09cb664834#section-7.1.1.1",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 7231"),a("OutboundLink")],1),t._v(' 中定义的 "HTTP 日期" 格式来发送）')])]),t._v(" "),a("tr",[a("td",[t._v("Expect")]),t._v(" "),a("td",[t._v("表示客户端要求服务器做出特定的行为")])]),t._v(" "),a("tr",[a("td",[t._v("From")]),t._v(" "),a("td",[t._v("发起此请求的用户的邮件地址")])]),t._v(" "),a("tr",[a("td",[t._v("Host")]),t._v(" "),a("td",[t._v("表示服务器的域名以及服务器所监听的端口号。如果所请求的端口是对应的服务的标准端口（80），则端口号可以省略。")])]),t._v(" "),a("tr",[a("td",[t._v("If-Match")]),t._v(" "),a("td",[t._v("仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要用于像 PUT 这样的方法中，仅当从用户上次更新某个资源后，该资源未被修改的情况下，才更新该资源。")])]),t._v(" "),a("tr",[a("td",[t._v("If-Modified-Since")]),t._v(" "),a("td",[t._v("允许在对应的资源未被修改的情况下返回 304 未修改")])]),t._v(" "),a("tr",[a("td",[t._v("If-None-Match")]),t._v(" "),a("td",[t._v("允许在对应的内容未被修改的情况下返回 304 未修改（ 304 Not Modified ），参考 超文本传输协议 的实体标记")])]),t._v(" "),a("tr",[a("td",[t._v("If-Range")]),t._v(" "),a("td",[t._v("如果该实体未被修改过，则向返回所缺少的那一个或多个部分。否则，返回整个新的实体")])]),t._v(" "),a("tr",[a("td",[t._v("If-Unmodified-Since")]),t._v(" "),a("td",[t._v("仅当该实体自某个特定时间以来未被修改的情况下，才发送回应。")])]),t._v(" "),a("tr",[a("td",[t._v("Max-Forwards")]),t._v(" "),a("td",[t._v("限制该消息可被代理及网关转发的次数。")])]),t._v(" "),a("tr",[a("td",[t._v("Origin")]),t._v(" "),a("td",[t._v("发起一个针对"),a("a",{attrs:{href:"http://itbilu.com/javascript/js/VkiXuUcC.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("跨域资源共享"),a("OutboundLink")],1),t._v("的请求（该请求要求服务器在响应中加入一个 Access-Control-Allow-Origin 的消息头，表示访问控制所允许的来源）。")])]),t._v(" "),a("tr",[a("td",[t._v("Pragma")]),t._v(" "),a("td",[t._v("与具体的实现相关，这些字段可能在请求 / 回应链中的任何时候产生。")])]),t._v(" "),a("tr",[a("td",[t._v("Proxy-Authorization")]),t._v(" "),a("td",[t._v("用于向代理进行认证的认证信息。")])]),t._v(" "),a("tr",[a("td",[t._v("Range")]),t._v(" "),a("td",[t._v("表示请求某个实体的一部分，字节偏移以 0 开始。")])]),t._v(" "),a("tr",[a("td",[t._v("Referer")]),t._v(" "),a("td",[t._v("表示浏览器所访问的前一个页面，可以认为是之前访问页面的链接将浏览器带到了当前页面。Referer 其实是 Referrer 这个单词，但 RFC 制作标准时给拼错了，后来也就将错就错使用 Referer 了。")])]),t._v(" "),a("tr",[a("td",[t._v("TE")]),t._v(" "),a("td",[t._v('浏览器预期接受的传输时的编码方式：可使用回应协议头 Transfer-Encoding 中的值（还可以使用 "trailers" 表示数据传输时的分块方式）用来表示浏览器希望在最后一个大小为 0 的块之后还接收到一些额外的字段。')])]),t._v(" "),a("tr",[a("td",[t._v("User-Agent")]),t._v(" "),a("td",[t._v("浏览器的身份标识字符串")])]),t._v(" "),a("tr",[a("td",[t._v("Upgrade")]),t._v(" "),a("td",[t._v("要求服务器升级到一个高版本协议。")])]),t._v(" "),a("tr",[a("td",[t._v("Via")]),t._v(" "),a("td",[t._v("告诉服务器，这个请求是由哪些代理发出的。")])]),t._v(" "),a("tr",[a("td",[t._v("Warning")]),t._v(" "),a("td",[t._v("一个一般性的警告，表示在实体内容体中可能存在错误。")])])])]),t._v(" "),a("h4",{attrs:{id:"_5-osi-七层模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-osi-七层模型"}},[t._v("#")]),t._v(" (5).OSI 七层模型")]),t._v(" "),a("p",[t._v("应用层：文件传输，常用协议 HTTP，snmp,FTP ,")]),t._v(" "),a("p",[t._v("表示层：数据格式化，代码转换，数据加密，")]),t._v(" "),a("p",[t._v("会话层：建立，解除会话")]),t._v(" "),a("p",[t._v("传输层：提供端对端的接口，tcp,udp")]),t._v(" "),a("p",[t._v("网络层：为数据包选择路由，IP，icmp")]),t._v(" "),a("p",[t._v("数据链路层：传输有地址的帧")]),t._v(" "),a("p",[t._v("物理层：二进制的数据形式在物理媒体上传输数据")]),t._v(" "),a("h4",{attrs:{id:"_5-tcp-和-udp-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-tcp-和-udp-的区别"}},[t._v("#")]),t._v(" (5).TCP 和 UDP 的区别")]),t._v(" "),a("ul",[a("li",[t._v("1.UDP\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("无连接")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("面向报文，只是报文的搬运工")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("不可靠，没有拥塞控制")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("高效，头部开销只有 8 字节")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("支持一对一、一对多、多对多、多对一")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("适合直播、视频、语音、会议等实时性要求高的")])])])])]),t._v(" "),a("li",[t._v("2.TCP\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("面向连接：传输前需要先连接")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("可靠的传输")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("流量控制：发送方不会发送速度过快，超过接收方的处理能力")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("拥塞控制：当网络负载过多时能限制发送方的发送速率")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("不提供时延保障")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("不提供最小带宽保障")])])])])])]),t._v(" "),a("h4",{attrs:{id:"_6-为什么三次握手四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-为什么三次握手四次挥手"}},[t._v("#")]),t._v(" (6). 为什么三次握手四次挥手")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("四次挥手")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("因为是双方彼此都建立了连接，因此双方都要释放自己的连接，A 向 B 发出一个释放连接请求，他要释放链接表明不再向 B 发送数据了，此时 B 收到了 A 发送的释放链接请求之后，给 A 发送一个确认，A 不能再向 B 发送数据了，它处于 FIN-WAIT-2 的状态，但是此时 B 还可以向 A 进行数据的传送。此时 B 向 A 发送一个断开连接的请求，A 收到之后给 B 发送一个确认。此时 B 关闭连接。A 也关闭连接。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("为什么要有 TIME-WAIT 这个状态呢，这是因为有可能最后一次确认丢失，如果 B 此时继续向 A 发送一个我要断开连接的请求等待 A 发送确认，但此时 A 已经关闭连接了，那么 B 永远也关不掉了，所以我们要有 TIME-WAIT 这个状态。")])])]),t._v(" "),a("li",[t._v("当然 TCP 也并不是 100% 可靠的。")])])]),t._v(" "),a("li",[a("ol",[a("li",[t._v("三次握手："),a("strong",[t._v("为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误")])])])])]),t._v(" "),a("h4",{attrs:{id:"_7-websocket-和-ajax-的区别是什么-websocket-的应用场景有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-websocket-和-ajax-的区别是什么-websocket-的应用场景有哪些"}},[t._v("#")]),t._v(" (7).websocket 和 ajax 的区别是什么，websocket 的应用场景有哪些")]),t._v(" "),a("p",[t._v("WebSocket 的诞生本质上就是为了解决 HTTP 协议本身的单向性问题：请求必须由客户端向服务端发起，然后服务端进行响应。这个 Request-Response 的关系是无法改变的。对于一般的网页浏览和访问当然没问题，一旦我们需要服务端主动向客户端发送消息时就麻烦了，因为此前的 TCP 连接已经释放，根本找不到客户端在哪。 为了能及时从服务器获取数据，程序员们煞费苦心研究出来的各种解决方案其实都是在 HTTP 框架下做的妥协，没法子，浏览器这东西只支持 HTTP，我们有什么办法。所以大家要么定时去轮询，要么就靠长连接——客户端发起请求，服务端把这个连接攥在手里不回复，等有消息了再回，如果超时了客户端就再请求一次——其实大家也懂，这只是个减少了请求次数、实时性更好的轮询，本质没变。")]),t._v(" "),a("p",[t._v("WebSocket 就是从技术根本上解决这个问题的：看名字就知道，它借用了 Web 的端口和消息头来创建连接，后续的数据传输又和基于 TCP 的 Socket 几乎完全一样，但封装了好多原本在 Socket 开发时需要我们手动去做的功能。比如原生支持 wss 安全访问（跟 https 共用端口和证书）、创建连接时的校验、从数据帧中自动拆分消息包等等。")]),t._v(" "),a("p",[t._v("换句话说，原本我们在浏览器里只能使用 HTTP 协议，现在有了 Socket，还是个更好用的 Socket。")]),t._v(" "),a("p",[t._v("了解了 WebSocket 的背景和特性之后，就可以回答它能不能取代 AJAX 这个问题了：")]),t._v(" "),a("p",[t._v("对于服务器与客户端的双向通信，WebSocket 简直是不二之选。如果不是还有少数旧版浏览器尚在服役的话，所有的轮询、长连接等方式早就该废弃掉。那些整合多种双向推送消息方式的库（如 http://Socket.IO、SignalR）当初最大的卖点就是兼容所有浏览器版本，自动识别旧版浏览器并采取不同的连接方式，现在也渐渐失去了优势——所有新版浏览器都兼容 WebSocket，直接用原生的就行了。说句题外话，这点很像 jQuery，在原生 js 难用时迅速崛起，当其他库和原生 js 都吸收了它的很多优势时，慢慢就不那么重要了。但是，很大一部分 AJAX 的使用场景仍然是传统的请求 - 响应形式，比如获取 json 数据、post 表单之类。这些功能虽然靠 WebSocket 也能实现，但就像在原本传输数据流的 TCP 之上定义了基于请求的 HTTP 协议一样，我们也要在 WebSocket 之上重新定义一种新的协议，最少也要加个 request id 用来区分每次响应数据对应的请求吧。")]),t._v(" "),a("p",[t._v("…… 但是，何苦一层叠一层地造个新轮子呢？直接使用 AJAX 不是更简单、更成熟吗？")]),t._v(" "),a("p",[t._v("另外还有一种情况，也就是传输大文件、图片、媒体流的时候，最好还是老老实实用 HTTP 来传。如果一定要用 WebSocket 的话，至少也专门为这些数据专门开辟个新通道，而别去占用那条用于推送消息、对实时性要求很强的连接。否则会把串行的 WebSocket 彻底堵死的。")]),t._v(" "),a("p",[t._v("所以说，WebSocket 在用于双向传输、推送消息方面能够做到灵活、简便、高效，但在普通的 Request-Response 过程中并没有太大用武之地，比起普通的 HTTP 请求来反倒麻烦了许多，甚至更为低效。")]),t._v(" "),a("p",[t._v("每项技术都有自身的优缺点，在适合它的地方能发挥出最大长处，而看到它的几个优点就不分场合地全方位推广的话，可能会适得其反。")]),t._v(" "),a("p",[t._v("我们自己在开发能与手机通信的互联网机器人时就使用了 WebSocket，效果很好。但并不是用它取代 HTTP，而是取代了原先用于通信的基于 TCP 的 Socket。")]),t._v(" "),a("p",[t._v("优点是：")]),t._v(" "),a("p",[t._v("原先在 Socket 连接后还要进行一些复杂的身份验证，同时要阻止未验证的连接发送控制指令。现在不需要了，在建立 WebSocket 连接的 url 里就能携带身份验证参数，验证不通过可以直接拒绝，不用设置状态；")]),t._v(" "),a("p",[t._v("原先自己实现了一套类似 SSL 的非对称加密机制，现在完全不需要了，直接通过 wss 加密，还能顺便保证证书的可信性；")]),t._v(" "),a("p",[t._v("原先要自己定义 Socket 数据格式，设置长度与标志，处理粘包、分包等问题，现在 WebSocket 收到的直接就是完整的数据包，完全不用自己处理；")]),t._v(" "),a("p",[t._v("前端的 nginx 可以直接进行转发与负载均衡，部署简单多了")]),t._v(" "),a("h4",{attrs:{id:"_8-tcp-ip-的网络模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-tcp-ip-的网络模型"}},[t._v("#")]),t._v(" (8).TCP/IP 的网络模型")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1.TCP/IP 模型是一系列网络协议的总称，这些协议的目的是使得计算机之间可以进行信息交换，")])]),t._v(" "),a("li",[a("p",[t._v("2.TCP/IP 模型四层架构从下到上分别是链路层，网络层，传输层，应用层")])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("链路层的作用是负责建立电路连接，是整个网络的物理基础，典型的协议包括以太网，ADSL 等，")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("网络层负责分配地址和传送二进制数据，主要协议是 IP 协议，")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("传输层负责传送文本数据，主要协议是 TCP")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[t._v("应用层负责传送各种最终形态的数据，是直接与用户信息打交道的层，主要协议是 http，ftp 等")])])])]),t._v(" "),a("h3",{attrs:{id:"_2-http-协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-http-协议"}},[t._v("#")]),t._v(" 2.HTTP 协议")]),t._v(" "),a("h4",{attrs:{id:"_1-常见的请求方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-常见的请求方法"}},[t._v("#")]),t._v(" (1). 常见的请求方法")]),t._v(" "),a("p",[t._v("HTTP 1.0")]),t._v(" "),a("ul",[a("li",[t._v("1.GET：从指定的资源请求数据")]),t._v(" "),a("li",[t._v("2.POST：向指定的资源提交要被处理的数据，例如\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("提交表单")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("将消息发布到公告板，新闻组，邮件列表，博客或类似的文章组；")])])])])]),t._v(" "),a("li",[t._v("3.HEAD\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("类似于 get 请求，只不过返回的响应中没有具体的内容，只有头部")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("只请求资源的首部")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("检查超链接的有效性")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("检查网页是否被修改")])])])])])]),t._v(" "),a("p",[t._v("HTTP1.1")]),t._v(" "),a("ul",[a("li",[t._v("1.PUT：替换或创建指定资源")]),t._v(" "),a("li",[t._v("2.DELETE：对指定资源进行删除")])]),t._v(" "),a("p",[t._v("HTTP2.0")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1.OPTIONS： 用于获取目的资源所支持的通信选项，比如说服务器支持的请求方式等等。")])]),t._v(" "),a("li",[a("p",[t._v("2.TRACE：实现沿通向目标资源的路径的消息环回（loop-back）测试 ，提供了一种实用的 debug 机制。")])]),t._v(" "),a("li",[a("p",[t._v("3.CONNECT")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("为代理服务器准备的")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("在 HTTP 协议中，"),a("strong",[a("code",[t._v("CONNECT")])]),t._v(" 方法可以开启一个客户端与所请求资源之间的双向沟通的通道。它可以用来创建隧道（tunnel）。例如，"),a("strong",[a("code",[t._v("CONNECT")])]),t._v(" 可以用来访问采用了 "),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/SSL",target:"_blank",rel:"noopener noreferrer"}},[t._v("SSL"),a("OutboundLink")],1),t._v(" ("),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/https",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTPS"),a("OutboundLink")],1),t._v(") 协议的站点。客户端要求代理服务器将 TCP 连接作为通往目的主机隧道。之后该服务器会代替客户端与目的主机建立连接。连接建立好之后，代理服务器会面向客户端发送或接收 TCP 消息流。")])])])])])]),t._v(" "),a("p",[t._v("所有通用服务器必须支持 GET 和 HEAD 方法。所有其他方法都是可选的。")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("安全性：在"),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc7231#section-4.1",target:"_blank",rel:"noopener noreferrer"}},[t._v("此规范"),a("OutboundLink")],1),t._v("定义的请求方法中，GET，HEAD，OPTIONS 和 TRACE 方法被定义为安全的")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("幂等性：PUT，DELETE 和安全 Method 是幂等的。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("可缓存性：GET, HEAD, and POST。但大多数是只实现 GET 和 HEAD 可缓存")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("表示浏览器是会自动缓存的，以应用于后续请求。除非 response 中有相关策略")])])])])])]),t._v(" "),a("h4",{attrs:{id:"_2-get-和-post-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-get-和-post-的区别"}},[t._v("#")]),t._v(" (2).GET 和 POST 的区别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1.get 参数通过 url 传递，post 放在 request body 中。")])]),t._v(" "),a("li",[a("p",[t._v("2.get 请求在 url 中传递的参数是有长度限制的，而 post 没有。")])]),t._v(" "),a("li",[a("p",[t._v("3.get 比 post 更不安全，因为参数直接暴露在 url 中，所以不能用来传递敏感信息。")])]),t._v(" "),a("li",[a("p",[t._v("4.get 请求只能进行 url 编码，而 post 支持多种编码方式")])]),t._v(" "),a("li",[a("p",[t._v("5.get 请求会浏览器主动 cache，而 post 支持多种编码方式。")])]),t._v(" "),a("li",[a("p",[t._v("6.get 请求参数会被完整保留在浏览历史记录里，而 post 中的参数不会被保留。")])]),t._v(" "),a("li",[a("p",[t._v("7.GET 和 POST 本质上就是 TCP 链接，并无差别。但是由于 HTTP 的规定和浏览器 / 服务器的限制，导致他们在应用过程中体现出一些不同。")])])]),t._v(" "),a("h4",{attrs:{id:"_3-http-状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-状态码"}},[t._v("#")]),t._v(" (3).HTTP 状态码")]),t._v(" "),a("ul",[a("li",[t._v("1xx (Informational): 收到请求，正在处理")]),t._v(" "),a("li",[t._v("2xx (Successful): 该请求已成功收到，理解并接受")]),t._v(" "),a("li",[t._v("3xx (Redirection): 重定向")]),t._v(" "),a("li",[t._v("4xx (Client Error): 该请求包含错误的语法或不能为完成")]),t._v(" "),a("li",[t._v("5xx (Server Error): 服务器错误")])]),t._v(" "),a("h4",{attrs:{id:"_4-301-和-302-有什么具体区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-301-和-302-有什么具体区别"}},[t._v("#")]),t._v(" (4).301 和 302 有什么具体区别")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("301：永久移动，请求的网页已永久移动到新的位置，服务器返回此响应，会自动将请求者转到新位置")])]),t._v(" "),a("li",[a("p",[t._v("302：历史移动，服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来继续以后的请求，")])])]),t._v(" "),a("h3",{attrs:{id:"_3-操作系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-操作系统"}},[t._v("#")]),t._v(" 3. 操作系统")]),t._v(" "),a("h4",{attrs:{id:"_1-进程和线程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-进程和线程的区别"}},[t._v("#")]),t._v(" (1). 进程和线程的区别")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("进程，是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机系统"),a("strong",[t._v("资源")]),t._v("的基本单位。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("线程，是进程的一部分，一个没有线程的进程可以被看作是单线程的。线程有时又被称为轻权进程或轻量级进程，也是 "),a("strong",[t._v("CPU 调度")]),t._v("的一个基本单位。")])])])]),t._v(" "),a("p",[t._v("一个程序至少有一个进程，一个进程至少有一个线程，资源分配给进程，同一个进程下所有线程共享该进程的资源")]),t._v(" "),a("h4",{attrs:{id:"_2-线程的哪些资源共享-哪些资源不共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-线程的哪些资源共享-哪些资源不共享"}},[t._v("#")]),t._v(" (2). 线程的哪些资源共享，哪些资源不共享")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("共享的资源有")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("堆：由于堆是在进程空间中开辟出来的，所以它是理所当然地被共享的；因此 new 出来的都是共享的（16 位平台上分全局堆和局部堆，局部堆是独享的）")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("全局变量：它是与具体某一函数无关的，所以也与特定线程无关；因此也是共享的")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("静态变量：虽然对于局部变量来说，它在代码中是 “放” 在某一函数中的，但是其存放位置和全局变量一样，存于堆中开辟的. bss 和. data 段，是共享的")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("文件等公用资源：这个是共享的，使用这些公共资源的线程必须同步。Win32 提供了几种同步资源的方式，包括信号、临界区、事件和互斥体。")])])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("独享的资源有")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("栈：栈是独享的")])])]),t._v(" "),a("li",[t._v("2 寄存器：这个可能会误解，因为电脑的寄存器是物理的，每个线程去取值难道不一样吗？其实线程里存放的是副本，包括程序计数器 PC")])])])]),t._v(" "),a("h4",{attrs:{id:"_3-进程间的通信方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-进程间的通信方式有哪些"}},[t._v("#")]),t._v(" (3). 进程间的通信方式有哪些")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("无名管道：半双工的通信方式，数据只能单向流动且只能在具有亲缘关系的进程间使用")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("高级管道：将另一个程序当作一个新的进程在当前程序进程中启动，则这个进程算是当前程序的子进程，")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("有名管道，：也是半双工的通信方式，但是允许没有亲缘进程之间的通信")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("消息队列：消息队列是有消息的链表，存放在内核中，并由消息队列标识符标识，消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限的缺点")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("信号量：信号量是一个计数器，可以用来控制多个进程对共享资源的访问，它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源，")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("信号：用于通知接受进程某个事件已经发生")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[t._v("共享内存：共享内存就是映射一段能被其他进程所访问的内存。这段共享内存由一个进程创建，但是多个进程可以访问，共享内存是最快的 IPC 方式，往往与其他通信机制配合使用")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"8"}},[a("li",[t._v("套接字：可用于不同机器之间的进程通信")])])])]),t._v(" "),a("h2",{attrs:{id:"六、前端进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、前端进阶"}},[t._v("#")]),t._v(" 六、前端进阶")]),t._v(" "),a("h3",{attrs:{id:"_1-vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue"}},[t._v("#")]),t._v(" 1.VUE")]),t._v(" "),a("h4",{attrs:{id:"_1-vue-的生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue-的生命周期"}},[t._v("#")]),t._v(" (1).vue 的生命周期")]),t._v(" "),a("p",[t._v("Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载 Dom、渲染→更新→渲染、销毁等一系列过程，我们称这是 Vue 的生命周期。通俗说就是 Vue 实例从创建到销毁的过程，就是生命周期。")]),t._v(" "),a("p",[t._v("每一个组件或者实例都会经历一个完整的生命周期，总共分为三个阶段：初始化、运行中、销毁。")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("实例、组件通过 new Vue() 创建出来之后会初始化事件和生命周期，然后就会执行 beforeCreate 钩子函数，这个时候，数据还没有挂载呢，只是一个空壳，无法访问到数据和真实的 dom，一般不做操作")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("挂载数据，绑定事件等等，然后执行 created 函数，这个时候已经可以使用到数据，也可以更改数据, 在这里更改数据不会触发 updated 函数，在这里可以在渲染前倒数第二次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("接下来开始找实例或者组件对应的模板，编译模板为虚拟 dom 放入到 render 函数中准备渲染，然后执行 beforeMount 钩子函数，在这个函数中虚拟 dom 已经创建完成，马上就要渲染, 在这里也可以更改数据，不会触发 updated，在这里可以在渲染前最后一次更改数据的机会，不会触发其他的钩子函数，一般可以在这里做初始数据的获取")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("接下来开始 render，渲染出真实 dom，然后执行 mounted 钩子函数，此时，组件已经出现在页面中，数据、真实 dom 都已经处理好了, 事件都已经挂载好了，可以在这里操作真实 dom 等事情...")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("当组件或实例的数据更改之后，会立即执行 beforeUpdate，然后 vue 的虚拟 dom 机制会重新构建虚拟 dom 与上一次的虚拟 dom 树利用 diff 算法进行对比之后重新渲染，一般不做什么事儿")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("当更新完成后，执行 updated，数据已经更改完成，dom 也重新 render 完成，可以操作更新后的虚拟 dom")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[t._v("当经过某种途径调用 $destroy 方法后，立即执行 beforeDestroy，一般在这里做一些善后工作，例如清除计时器、清除非指令绑定的事件等等")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"8"}},[a("li",[t._v("组件的数据绑定、监听... 去掉后只剩下 dom 空壳，这个时候，执行 destroyed，在这里做善后工作也可以")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-vue-双向绑定原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue-双向绑定原理"}},[t._v("#")]),t._v(" (2).Vue 双向绑定原理")]),t._v(" "),a("p",[t._v("vue 数据双向绑定是通过数据劫持结合发布者 - 订阅者模式的方式来实现的。利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值 (get) 和设置属性值(set)。")]),t._v(" "),a("h3",{attrs:{id:"_2-webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-webpack"}},[t._v("#")]),t._v(" 2.Webpack")]),t._v(" "),a("p",[t._v("webpack 是一个现代 JavaScript 应用程序的静态模块打包器 (module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图 (dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。")]),t._v(" "),a("h4",{attrs:{id:"_1-webpack-和-gulp-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-webpack-和-gulp-区别"}},[t._v("#")]),t._v(" (1).webpack 和 gulp 区别")]),t._v(" "),a("p",[t._v("gulp 强调的是前端开发的工作流程，我们可以通过配置一系列的 task，定义 task 处理的事务（例如文件压缩合并、雪碧图、启动 server、版本控制等），然后定义执行顺序，来让 gulp 执行这些 task，从而构建项目的整个前端开发流程。")]),t._v(" "),a("p",[t._v("webpack 是一个前端模块化方案，更侧重模块打包，我们可以把开发中的所有资源（图片、js 文件、css 文件等）都看成模块，通过 loader（加载器）和 plugins（插件）对资源进行处理，打包成符合生产环境部署的前端资源。")]),t._v(" "),a("h3",{attrs:{id:"_3-模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-模块化"}},[t._v("#")]),t._v(" 3. 模块化")]),t._v(" "),a("h4",{attrs:{id:"_1-如何理解前端模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何理解前端模块化"}},[t._v("#")]),t._v(" (1). 如何理解前端模块化")]),t._v(" "),a("p",[t._v("前端模块化就是复杂的文件编程一个一个独立的模块，比如 js 文件等等，分成独立的模块有利于重用（复用性）和维护（版本迭代），这样会引来模块之间相互依赖的问题，所以有了 commonJS 规范，AMD，CMD 规范等等，以及用于 js 打包（编译等处理）的工具 webpack")]),t._v(" "),a("h4",{attrs:{id:"_2-说一下-commonjs、amd-和-cmd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-说一下-commonjs、amd-和-cmd"}},[t._v("#")]),t._v(" (2). 说一下 Commonjs、AMD 和 CMD")]),t._v(" "),a("p",[t._v("一个模块是能实现特定功能的文件，有了模块就可以方便的使用别人的代码，想要什么功能就能加载什么模块。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1.Commonjs：开始于服务器端的模块化，同步定义的模块化，每个模块都是一个单独的作用域，模块输出，modules.exports，模块加载 require() 引入模块。")])]),t._v(" "),a("li",[a("p",[t._v("2.AMD：中文名异步模块定义的意思。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1.require JS 实现了 AMD 规范")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("主要用于解决下述两个问题。")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("多个文件有依赖关系，被依赖的文件需要早于依赖它的文件加载到浏览器")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("加载的时候浏览器会停止页面渲染，加载文件越多，页面失去响应的时间越长。")])])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("语法：requireJS 定义了一个函数 define，它是全局变量，用来定义模块。")])])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//定义模块\ndefine(['dependency'], function(){\n  var name = 'Byron';\n  function printName(){\n    console.log(name);\n  }\n  return {\n    printName: printName\n  };\n});\n\n复制代码\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//加载模块\nrequire(['myModule'], function (my){\n  my.printName();\n}\n复制代码\n")])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("总结 AMD 规范：require() 函数在加载依赖函数的时候是异步加载的，这样浏览器不会失去响应，它指定的回调函数，只有前面的模块加载成功，才会去执行。因为网页在加载 js 的时候会停止渲染，因此我们可以通过异步的方式去加载 js, 而如果需要依赖某些，也是异步去依赖，依赖后再执行某些方法。")])])])])])]),t._v(" "),a("h3",{attrs:{id:"_4-简单实现-node-的-events-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-简单实现-node-的-events-模块"}},[t._v("#")]),t._v(" 4. 简单实现 Node 的 Events 模块")]),t._v(" "),a("p",[t._v("简介：观察者模式或者说订阅模式，它定义了对象间的一种一对多的关系，让多个观察者对象同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知。")]),t._v(" "),a("p",[t._v("node 中的 Events 模块就是通过观察者模式来实现的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("微信公众号：世界上有意思的事\n\nvar events=require('events');\nvar eventEmitter=new events.EventEmitter();\neventEmitter.on('say',function(name){\n  console.log('Hello',name);\n})\neventEmitter.emit('say','Jony yu');\n复制代码\n")])])]),a("p",[t._v("这样，eventEmitter 发出 say 事件，通过 On 接收，并且输出结果，这就是一个订阅模式的实现，下面我们来简单的实现一个 Events 模块的 EventEmitter。")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("实现简单的 Event 模块的 emit 和 on 方法")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Events(){\n    this.on=function(eventName,callBack){\n        if(!this.handles){\n            this.handles={};\n        }\n        if(!this.handles[eventName]){\n            this.handles[eventName]=[];\n        }\n        this.handles[eventName].push(callBack);\n    }\n    this.emit=function(eventName,obj){\n        if(this.handles[eventName]){\n            for(var i=0;o<this.handles[eventName].length;i++){\n                this.handles[eventName][i](obj);\n            }\n        }\n    }\n    return this;\n}\n复制代码\n")])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("这样我们就定义了 Events，现在我们可以开始来调用：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var events=new Events();\nevents.on('say',function(name){\n    console.log('Hello',nama)\n});\n\n//结果就是通过emit调用之后，输出了Jony yu\nevents.emit('say','Jony yu');\n复制代码\n")])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("每个对象是独立的")])]),t._v(" "),a("p",[t._v("因为是通过 new 的方式，每次生成的对象都是不相同的，因此：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var event1=new Events();\nvar event2=new Events();\nevent1.on('say',function(){\n    console.log('Jony event1');\n});\nevent2.on('say',function(){\n    console.log('Jony event2');\n})\n\n//event1、event2之间的事件监听互相不影响\n//输出结果为'Jony event1' 'Jony event2'\nevent1.emit('say');\nevent2.emit('say');\n复制代码\n")])])])])]),t._v(" "),a("h3",{attrs:{id:"_5-性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-性能优化"}},[t._v("#")]),t._v(" 5. 性能优化")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("降低请求量：合并资源，减少 HTTP 请求数，minify / gzip 压缩，webP，图片 lazyLoad。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("加快请求速度：预解析 DNS，减少域名数，并行加载，CDN 分发。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存 localStorage。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("渲染：JS/CSS 优化（避免使用 CSS 表达式），加载顺序（将 CSS 样式表放在顶部，把 javascript 放在底部），服务端渲染，pipeline。")])])])]),t._v(" "),a("h2",{attrs:{id:"七、尾巴"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、尾巴"}},[t._v("#")]),t._v(" 七、尾巴")]),t._v(" "),a("p",[a("strong",[t._v("看到这里，是不是惊叹于小姐姐的实力了？赶紧点赞、评论、关注、分享吧！！")])])])}),[],!1,null,null,null);e.default=n.exports}}]);